/*! For license information please see main.6347b25bb7c1e3b5fa80.js.LICENSE.txt */
(()=>{var e={91:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e):e}},755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,o){"use strict";var r=[],s=Object.getPrototypeOf,a=r.slice,l=r.flat?function(e){return r.flat.call(e)}:function(e){return r.concat.apply([],e)},c=r.push,d=r.indexOf,u={},p=u.toString,f=u.hasOwnProperty,h=f.toString,g=h.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},m=function(e){return null!=e&&e===e.window},w=i.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var i,o,r=(n=n||w).createElement("script");if(r.text=e,t)for(i in b)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[p.call(e)]||"object":typeof e}var k="3.7.1",S=/HTML$/i,C=function(e,t){return new C.fn.init(e,t)};function $(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!y(e)&&!m(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}C.fn=C.prototype={jquery:k,constructor:C,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(C.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:r.sort,splice:r.splice},C.extend=C.fn.extend=function(){var e,t,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||y(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(c&&i&&(C.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[t],r=o&&!Array.isArray(n)?[]:o||C.isPlainObject(n)?n:{},o=!1,s[t]=C.extend(c,r,i)):void 0!==i&&(s[t]=i));return s},C.extend({expando:"jQuery"+(k+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=s(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||h.call(n)!==g))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if($(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},text:function(e){var t,n="",i=0,o=e.nodeType;if(!o)for(;t=e[i++];)n+=C.text(t);return 1===o||11===o?e.textContent:9===o?e.documentElement.textContent:3===o||4===o?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&($(Object(e))?C.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:d.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!S.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,s=!n;o<r;o++)!t(e[o],o)!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,s=[];if($(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&s.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&s.push(o);return l(s)},guid:1,support:v}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=r[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){u["[object "+t+"]"]=t.toLowerCase()}));var E=r.pop,L=r.sort,j=r.splice,D="[\\x20\\t\\r\\n\\f]",H=new RegExp("^"+D+"+|((?:^|[^\\\\])(?:\\\\.)*)"+D+"+$","g");C.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var O=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function P(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}C.escapeSelector=function(e){return(e+"").replace(O,P)};var N=w,M=c;!function(){var e,t,n,o,s,l,c,u,p,h,g=M,y=C.expando,m=0,w=0,b=ee(),x=ee(),T=ee(),k=ee(),S=function(e,t){return e===t&&(s=!0),0},$="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="(?:\\\\[\\da-fA-F]{1,6}"+D+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",P="\\["+D+"*("+O+")(?:"+D+"*([*^$|!~]?=)"+D+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+D+"*\\]",q=":("+O+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",R=new RegExp(D+"+","g"),I=new RegExp("^"+D+"*,"+D+"*"),z=new RegExp("^"+D+"*([>+~]|"+D+")"+D+"*"),W=new RegExp(D+"|>"),U=new RegExp(q),F=new RegExp("^"+O+"$"),B={ID:new RegExp("^#("+O+")"),CLASS:new RegExp("^\\.("+O+")"),TAG:new RegExp("^("+O+"|[*])"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+D+"*(even|odd|(([+-]|)(\\d*)n|)"+D+"*(?:([+-]|)"+D+"*(\\d+)|))"+D+"*\\)|)","i"),bool:new RegExp("^(?:"+$+")$","i"),needsContext:new RegExp("^"+D+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+D+"*((?:-\\d)?\\d*)"+D+"*\\)|)(?=[^-]|$)","i")},_=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,V=/[+~]/,G=new RegExp("\\\\[\\da-fA-F]{1,6}"+D+"?|\\\\([^\\r\\n\\f])","g"),Q=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},J=function(){le()},K=pe((function(e){return!0===e.disabled&&A(e,"fieldset")}),{dir:"parentNode",next:"legend"});try{g.apply(r=a.call(N.childNodes),N.childNodes),r[N.childNodes.length].nodeType}catch(e){g={apply:function(e,t){M.apply(e,a.call(t))},call:function(e){M.apply(e,a.call(arguments,1))}}}function Z(e,t,n,i){var o,r,s,a,c,d,f,h=t&&t.ownerDocument,m=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==m&&9!==m&&11!==m)return n;if(!i&&(le(t),t=t||l,u)){if(11!==m&&(c=Y.exec(e)))if(o=c[1]){if(9===m){if(!(s=t.getElementById(o)))return n;if(s.id===o)return g.call(n,s),n}else if(h&&(s=h.getElementById(o))&&Z.contains(t,s)&&s.id===o)return g.call(n,s),n}else{if(c[2])return g.apply(n,t.getElementsByTagName(e)),n;if((o=c[3])&&t.getElementsByClassName)return g.apply(n,t.getElementsByClassName(o)),n}if(!(k[e+" "]||p&&p.test(e))){if(f=e,h=t,1===m&&(W.test(e)||z.test(e))){for((h=V.test(e)&&ae(t.parentNode)||t)==t&&v.scope||((a=t.getAttribute("id"))?a=C.escapeSelector(a):t.setAttribute("id",a=y)),r=(d=de(e)).length;r--;)d[r]=(a?"#"+a:":scope")+" "+ue(d[r]);f=d.join(",")}try{return g.apply(n,h.querySelectorAll(f)),n}catch(t){k(e,!0)}finally{a===y&&t.removeAttribute("id")}}}return me(e.replace(H,"$1"),t,n,i)}function ee(){var e=[];return function n(i,o){return e.push(i+" ")>t.cacheLength&&delete n[e.shift()],n[i+" "]=o}}function te(e){return e[y]=!0,e}function ne(e){var t=l.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ie(e){return function(t){return A(t,"input")&&t.type===e}}function oe(e){return function(t){return(A(t,"input")||A(t,"button"))&&t.type===e}}function re(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&K(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function se(e){return te((function(t){return t=+t,te((function(n,i){for(var o,r=e([],n.length,t),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))}))}))}function ae(e){return e&&void 0!==e.getElementsByTagName&&e}function le(e){var n,i=e?e.ownerDocument||e:N;return i!=l&&9===i.nodeType&&i.documentElement?(c=(l=i).documentElement,u=!C.isXMLDoc(l),h=c.matches||c.webkitMatchesSelector||c.msMatchesSelector,c.msMatchesSelector&&N!=l&&(n=l.defaultView)&&n.top!==n&&n.addEventListener("unload",J),v.getById=ne((function(e){return c.appendChild(e).id=C.expando,!l.getElementsByName||!l.getElementsByName(C.expando).length})),v.disconnectedMatch=ne((function(e){return h.call(e,"*")})),v.scope=ne((function(){return l.querySelectorAll(":scope")})),v.cssHas=ne((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),v.getById?(t.filter.ID=function(e){var t=e.replace(G,Q);return function(e){return e.getAttribute("id")===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&u){var n=t.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var t=e.replace(G,Q);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&u){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),t.find.TAG=function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},t.find.CLASS=function(e,t){if(void 0!==t.getElementsByClassName&&u)return t.getElementsByClassName(e)},p=[],ne((function(e){var t;c.appendChild(e).innerHTML="<a id='"+y+"' href='' disabled='disabled'></a><select id='"+y+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||p.push("\\["+D+"*(?:value|"+$+")"),e.querySelectorAll("[id~="+y+"-]").length||p.push("~="),e.querySelectorAll("a#"+y+"+*").length||p.push(".#.+[+~]"),e.querySelectorAll(":checked").length||p.push(":checked"),(t=l.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),c.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),(t=l.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||p.push("\\["+D+"*name"+D+"*="+D+"*(?:''|\"\")")})),v.cssHas||p.push(":has"),p=p.length&&new RegExp(p.join("|")),S=function(e,t){if(e===t)return s=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!v.sortDetached&&t.compareDocumentPosition(e)===n?e===l||e.ownerDocument==N&&Z.contains(N,e)?-1:t===l||t.ownerDocument==N&&Z.contains(N,t)?1:o?d.call(o,e)-d.call(o,t):0:4&n?-1:1)},l):l}for(e in Z.matches=function(e,t){return Z(e,null,null,t)},Z.matchesSelector=function(e,t){if(le(e),u&&!k[t+" "]&&(!p||!p.test(t)))try{var n=h.call(e,t);if(n||v.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){k(t,!0)}return Z(t,l,null,[e]).length>0},Z.contains=function(e,t){return(e.ownerDocument||e)!=l&&le(e),C.contains(e,t)},Z.attr=function(e,n){(e.ownerDocument||e)!=l&&le(e);var i=t.attrHandle[n.toLowerCase()],o=i&&f.call(t.attrHandle,n.toLowerCase())?i(e,n,!u):void 0;return void 0!==o?o:e.getAttribute(n)},Z.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},C.uniqueSort=function(e){var t,n=[],i=0,r=0;if(s=!v.sortStable,o=!v.sortStable&&a.call(e,0),L.call(e,S),s){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)j.call(e,n[i],1)}return o=null,e},C.fn.uniqueSort=function(){return this.pushStack(C.uniqueSort(a.apply(this)))},t=C.expr={cacheLength:50,createPseudo:te,match:B,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(G,Q),e[3]=(e[3]||e[4]||e[5]||"").replace(G,Q),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||Z.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&Z.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return B.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=de(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(G,Q).toLowerCase();return"*"===e?function(){return!0}:function(e){return A(e,t)}},CLASS:function(e){var t=b[e+" "];return t||(t=new RegExp("(^|"+D+")"+e+"("+D+"|$)"))&&b(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var o=Z.attr(i,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,d,u,p,f,h=r!==s?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),w=!l&&!a,b=!1;if(g){if(r){for(;h;){for(u=t;u=u[h];)if(a?A(u,v):1===u.nodeType)return!1;f=h="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?g.firstChild:g.lastChild],s&&w){for(b=(p=(c=(d=g[y]||(g[y]={}))[e]||[])[0]===m&&c[1])&&c[2],u=p&&g.childNodes[p];u=++p&&u&&u[h]||(b=p=0)||f.pop();)if(1===u.nodeType&&++b&&u===t){d[e]=[m,p,b];break}}else if(w&&(b=p=(c=(d=t[y]||(t[y]={}))[e]||[])[0]===m&&c[1]),!1===b)for(;(u=++p&&u&&u[h]||(b=p=0)||f.pop())&&(!(a?A(u,v):1===u.nodeType)||!++b||(w&&((d=u[y]||(u[y]={}))[e]=[m,b]),u!==t)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,n){var i,o=t.pseudos[e]||t.setFilters[e.toLowerCase()]||Z.error("unsupported pseudo: "+e);return o[y]?o(n):o.length>1?(i=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?te((function(e,t){for(var i,r=o(e,n),s=r.length;s--;)e[i=d.call(e,r[s])]=!(t[i]=r[s])})):function(e){return o(e,0,i)}):o}},pseudos:{not:te((function(e){var t=[],n=[],i=ye(e.replace(H,"$1"));return i[y]?te((function(e,t,n,o){for(var r,s=i(e,null,o,[]),a=e.length;a--;)(r=s[a])&&(e[a]=!(t[a]=r))})):function(e,o,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}})),has:te((function(e){return function(t){return Z(e,t).length>0}})),contains:te((function(e){return e=e.replace(G,Q),function(t){return(t.textContent||C.text(t)).indexOf(e)>-1}})),lang:te((function(e){return F.test(e||"")||Z.error("unsupported lang: "+e),e=e.replace(G,Q).toLowerCase(),function(t){var n;do{if(n=u?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===c},focus:function(e){return e===function(){try{return l.activeElement}catch(e){}}()&&l.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:re(!1),disabled:re(!0),checked:function(e){return A(e,"input")&&!!e.checked||A(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return _.test(e.nodeName)},button:function(e){return A(e,"input")&&"button"===e.type||A(e,"button")},text:function(e){var t;return A(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:se((function(){return[0]})),last:se((function(e,t){return[t-1]})),eq:se((function(e,t,n){return[n<0?n+t:n]})),even:se((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:se((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:se((function(e,t,n){var i;for(i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:se((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[e]=ie(e);for(e in{submit:!0,reset:!0})t.pseudos[e]=oe(e);function ce(){}function de(e,n){var i,o,r,s,a,l,c,d=x[e+" "];if(d)return n?0:d.slice(0);for(a=e,l=[],c=t.preFilter;a;){for(s in i&&!(o=I.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=z.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(H," ")}),a=a.slice(i.length)),t.filter)!(o=B[s].exec(a))||c[s]&&!(o=c[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?Z.error(e):x(e,l).slice(0)}function ue(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function pe(e,t,n){var i=t.dir,o=t.next,r=o||i,s=n&&"parentNode"===r,a=w++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,l){var c,d,u=[m,a];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(d=t[y]||(t[y]={}),o&&A(t,o))t=t[i]||t;else{if((c=d[r])&&c[0]===m&&c[1]===a)return u[2]=c[2];if(d[r]=u,u[2]=e(t,n,l))return!0}return!1}}function fe(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function he(e,t,n,i,o){for(var r,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,o)||(s.push(r),c&&t.push(a)));return s}function ge(e,t,n,i,o,r){return i&&!i[y]&&(i=ge(i)),o&&!o[y]&&(o=ge(o,r)),te((function(r,s,a,l){var c,u,p,f,h=[],v=[],y=s.length,m=r||function(e,t,n){for(var i=0,o=t.length;i<o;i++)Z(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),w=!e||!r&&t?m:he(m,h,e,a,l);if(n?n(w,f=o||(r?e:y||i)?[]:s,a,l):f=w,i)for(c=he(f,v),i(c,[],a,l),u=c.length;u--;)(p=c[u])&&(f[v[u]]=!(w[v[u]]=p));if(r){if(o||e){if(o){for(c=[],u=f.length;u--;)(p=f[u])&&c.push(w[u]=p);o(null,f=[],c,l)}for(u=f.length;u--;)(p=f[u])&&(c=o?d.call(r,p):h[u])>-1&&(r[c]=!(s[c]=p))}}else f=he(f===s?f.splice(y,f.length):f),o?o(null,s,f,l):g.apply(s,f)}))}function ve(e){for(var i,o,r,s=e.length,a=t.relative[e[0].type],l=a||t.relative[" "],c=a?1:0,u=pe((function(e){return e===i}),l,!0),p=pe((function(e){return d.call(i,e)>-1}),l,!0),f=[function(e,t,o){var r=!a&&(o||t!=n)||((i=t).nodeType?u(e,t,o):p(e,t,o));return i=null,r}];c<s;c++)if(o=t.relative[e[c].type])f=[pe(fe(f),o)];else{if((o=t.filter[e[c].type].apply(null,e[c].matches))[y]){for(r=++c;r<s&&!t.relative[e[r].type];r++);return ge(c>1&&fe(f),c>1&&ue(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(H,"$1"),o,c<r&&ve(e.slice(c,r)),r<s&&ve(e=e.slice(r)),r<s&&ue(e))}f.push(o)}return fe(f)}function ye(e,i){var o,r=[],s=[],a=T[e+" "];if(!a){for(i||(i=de(e)),o=i.length;o--;)(a=ve(i[o]))[y]?r.push(a):s.push(a);a=T(e,function(e,i){var o=i.length>0,r=e.length>0,s=function(s,a,c,d,p){var f,h,v,y=0,w="0",b=s&&[],x=[],T=n,k=s||r&&t.find.TAG("*",p),S=m+=null==T?1:Math.random()||.1,$=k.length;for(p&&(n=a==l||a||p);w!==$&&null!=(f=k[w]);w++){if(r&&f){for(h=0,a||f.ownerDocument==l||(le(f),c=!u);v=e[h++];)if(v(f,a||l,c)){g.call(d,f);break}p&&(m=S)}o&&((f=!v&&f)&&y--,s&&b.push(f))}if(y+=w,o&&w!==y){for(h=0;v=i[h++];)v(b,x,a,c);if(s){if(y>0)for(;w--;)b[w]||x[w]||(x[w]=E.call(d));x=he(x)}g.apply(d,x),p&&!s&&x.length>0&&y+i.length>1&&C.uniqueSort(d)}return p&&(m=S,n=T),b};return o?te(s):s}(s,r)),a.selector=e}return a}function me(e,n,i,o){var r,s,a,l,c,d="function"==typeof e&&e,p=!o&&de(e=d.selector||e);if(i=i||[],1===p.length){if((s=p[0]=p[0].slice(0)).length>2&&"ID"===(a=s[0]).type&&9===n.nodeType&&u&&t.relative[s[1].type]){if(!(n=(t.find.ID(a.matches[0].replace(G,Q),n)||[])[0]))return i;d&&(n=n.parentNode),e=e.slice(s.shift().value.length)}for(r=B.needsContext.test(e)?0:s.length;r--&&(a=s[r],!t.relative[l=a.type]);)if((c=t.find[l])&&(o=c(a.matches[0].replace(G,Q),V.test(s[0].type)&&ae(n.parentNode)||n))){if(s.splice(r,1),!(e=o.length&&ue(s)))return g.apply(i,o),i;break}}return(d||ye(e,p))(o,n,!u,i,!n||V.test(e)&&ae(n.parentNode)||n),i}ce.prototype=t.filters=t.pseudos,t.setFilters=new ce,v.sortStable=y.split("").sort(S).join("")===y,le(),v.sortDetached=ne((function(e){return 1&e.compareDocumentPosition(l.createElement("fieldset"))})),C.find=Z,C.expr[":"]=C.expr.pseudos,C.unique=C.uniqueSort,Z.compile=ye,Z.select=me,Z.setDocument=le,Z.tokenize=de,Z.escape=C.escapeSelector,Z.getText=C.text,Z.isXML=C.isXMLDoc,Z.selectors=C.expr,Z.support=C.support,Z.uniqueSort=C.uniqueSort}();var q=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&C(e).is(n))break;i.push(e)}return i},R=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},I=C.expr.match.needsContext,z=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function W(e,t,n){return y(t)?C.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?C.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?C.grep(e,(function(e){return d.call(t,e)>-1!==n})):C.filter(t,e,n)}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,(function(e){return 1===e.nodeType})))},C.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(C(e).filter((function(){for(t=0;t<i;t++)if(C.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)C.find(e,o[t],n);return i>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(W(this,e||[],!1))},not:function(e){return this.pushStack(W(this,e||[],!0))},is:function(e){return!!W(this,"string"==typeof e&&I.test(e)?C(e):e||[],!1).length}});var U,F=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||U,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:F.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),z.test(i[1])&&C.isPlainObject(t))for(i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=w.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,U=C(w);var B=/^(?:parents|prev(?:Until|All))/,_={children:!0,contents:!0,next:!0,prev:!0};function X(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,o=this.length,r=[],s="string"!=typeof e&&C(e);if(!I.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?C.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?d.call(C(e),this[0]):d.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return q(e,"parentNode")},parentsUntil:function(e,t,n){return q(e,"parentNode",n)},next:function(e){return X(e,"nextSibling")},prev:function(e){return X(e,"previousSibling")},nextAll:function(e){return q(e,"nextSibling")},prevAll:function(e){return q(e,"previousSibling")},nextUntil:function(e,t,n){return q(e,"nextSibling",n)},prevUntil:function(e,t,n){return q(e,"previousSibling",n)},siblings:function(e){return R((e.parentNode||{}).firstChild,e)},children:function(e){return R(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},(function(e,t){C.fn[e]=function(n,i){var o=C.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=C.filter(i,o)),this.length>1&&(_[e]||C.uniqueSort(o),B.test(e)&&o.reverse()),this.pushStack(o)}}));var Y=/[^\x20\t\r\n\f]+/g;function V(e){return e}function G(e){throw e}function Q(e,t,n,i){var o;try{e&&y(o=e.promise)?o.call(e).done(t).fail(n):e&&y(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(Y)||[],(function(e,n){t[n]=!0})),t}(e):C.extend({},e);var t,n,i,o,r=[],s=[],a=-1,l=function(){for(o=o||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},c={add:function(){return r&&(n&&!t&&(a=r.length-1,s.push(n)),function t(n){C.each(n,(function(n,i){y(i)?e.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==T(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return C.each(arguments,(function(e,t){for(var n;(n=C.inArray(t,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(e){return e?C.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=s=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=s=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return C.Deferred((function(n){C.each(t,(function(t,i){var o=y(e[i[4]])&&e[i[4]];r[i[1]]((function(){var e=o&&o.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var r=0;function s(e,t,n,o){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(e<r)){if((i=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,y(c)?o?c.call(i,s(r,t,V,o),s(r,t,G,o)):(r++,c.call(i,s(r,t,V,o),s(r,t,G,o),s(r,t,V,t.notifyWith))):(n!==V&&(a=void 0,l=[i]),(o||t.resolveWith)(a,l))}},d=o?c:function(){try{c()}catch(i){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(i,d.error),e+1>=r&&(n!==G&&(a=void 0,l=[i]),t.rejectWith(a,l))}};e?d():(C.Deferred.getErrorHook?d.error=C.Deferred.getErrorHook():C.Deferred.getStackHook&&(d.error=C.Deferred.getStackHook()),i.setTimeout(d))}}return C.Deferred((function(i){t[0][3].add(s(0,i,y(o)?o:V,i.notifyWith)),t[1][3].add(s(0,i,y(e)?e:V)),t[2][3].add(s(0,i,y(n)?n:G))})).promise()},promise:function(e){return null!=e?C.extend(e,o):o}},r={};return C.each(t,(function(e,i){var s=i[2],a=i[5];o[i[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(i[3].fire),r[i[0]]=function(){return r[i[0]+"With"](this===r?void 0:this,arguments),this},r[i[0]+"With"]=s.fireWith})),o.promise(r),e&&e.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=a.call(arguments),r=C.Deferred(),s=function(e){return function(n){i[e]=this,o[e]=arguments.length>1?a.call(arguments):n,--t||r.resolveWith(i,o)}};if(t<=1&&(Q(e,r.done(s(n)).resolve,r.reject,!t),"pending"===r.state()||y(o[n]&&o[n].then)))return r.then();for(;n--;)Q(o[n],s(n),r.reject);return r.promise()}});var J=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&J.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){i.setTimeout((function(){throw e}))};var K=C.Deferred();function Z(){w.removeEventListener("DOMContentLoaded",Z),i.removeEventListener("load",Z),C.ready()}C.fn.ready=function(e){return K.then(e).catch((function(e){C.readyException(e)})),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||K.resolveWith(w,[C]))}}),C.ready.then=K.then,"complete"===w.readyState||"loading"!==w.readyState&&!w.documentElement.doScroll?i.setTimeout(C.ready):(w.addEventListener("DOMContentLoaded",Z),i.addEventListener("load",Z));var ee=function(e,t,n,i,o,r,s){var a=0,l=e.length,c=null==n;if("object"===T(n))for(a in o=!0,n)ee(e,t,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,y(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(C(e),n)})),t))for(;a<l;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return o?e:c?t.call(e):l?t(e[0],n):r},te=/^-ms-/,ne=/-([a-z])/g;function ie(e,t){return t.toUpperCase()}function oe(e){return e.replace(te,"ms-").replace(ne,ie)}var re=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function se(){this.expando=C.expando+se.uid++}se.uid=1,se.prototype={cache:function(e){var t=e[this.expando];return t||(t={},re(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[oe(t)]=n;else for(i in t)o[oe(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][oe(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(oe):(t=oe(t))in i?[t]:t.match(Y)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||C.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var ae=new se,le=new se,ce=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,de=/[A-Z]/g;function ue(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(de,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ce.test(e)?JSON.parse(e):e)}(n)}catch(e){}le.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return le.hasData(e)||ae.hasData(e)},data:function(e,t,n){return le.access(e,t,n)},removeData:function(e,t){le.remove(e,t)},_data:function(e,t,n){return ae.access(e,t,n)},_removeData:function(e,t){ae.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===e){if(this.length&&(o=le.get(r),1===r.nodeType&&!ae.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=oe(i.slice(5)),ue(r,i,o[i]));ae.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){le.set(this,e)})):ee(this,(function(t){var n;if(r&&void 0===t)return void 0!==(n=le.get(r,e))||void 0!==(n=ue(r,e))?n:void 0;this.each((function(){le.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){le.remove(this,e)}))}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=ae.get(e,t),n&&(!i||Array.isArray(n)?i=ae.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,o=n.shift(),r=C._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,(function(){C.dequeue(e,t)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ae.get(e,n)||ae.access(e,n,{empty:C.Callbacks("once memory").add((function(){ae.remove(e,[t+"queue",n])}))})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each((function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){C.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=C.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=ae.get(r[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(t)}});var pe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,fe=new RegExp("^(?:([+-])=|)("+pe+")([a-z%]*)$","i"),he=["Top","Right","Bottom","Left"],ge=w.documentElement,ve=function(e){return C.contains(e.ownerDocument,e)},ye={composed:!0};ge.getRootNode&&(ve=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(ye)===e.ownerDocument});var me=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ve(e)&&"none"===C.css(e,"display")};function we(e,t,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return C.css(e,t,"")},l=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),d=e.nodeType&&(C.cssNumber[t]||"px"!==c&&+l)&&fe.exec(C.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;s--;)C.style(e,t,d+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),d/=r;d*=2,C.style(e,t,d+c),n=n||[]}return n&&(d=+d||+l||0,o=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=o)),o}var be={};function xe(e){var t,n=e.ownerDocument,i=e.nodeName,o=be[i];return o||(t=n.body.appendChild(n.createElement(i)),o=C.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),be[i]=o,o)}function Te(e,t){for(var n,i,o=[],r=0,s=e.length;r<s;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(o[r]=ae.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&me(i)&&(o[r]=xe(i))):"none"!==n&&(o[r]="none",ae.set(i,"display",n)));for(r=0;r<s;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}C.fn.extend({show:function(){return Te(this,!0)},hide:function(){return Te(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){me(this)?C(this).show():C(this).hide()}))}});var ke,Se,Ce=/^(?:checkbox|radio)$/i,$e=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ae=/^$|^module$|\/(?:java|ecma)script/i;ke=w.createDocumentFragment().appendChild(w.createElement("div")),(Se=w.createElement("input")).setAttribute("type","radio"),Se.setAttribute("checked","checked"),Se.setAttribute("name","t"),ke.appendChild(Se),v.checkClone=ke.cloneNode(!0).cloneNode(!0).lastChild.checked,ke.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!ke.cloneNode(!0).lastChild.defaultValue,ke.innerHTML="<option></option>",v.option=!!ke.lastChild;var Ee={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Le(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?C.merge([e],n):n}function je(e,t){for(var n=0,i=e.length;n<i;n++)ae.set(e[n],"globalEval",!t||ae.get(t[n],"globalEval"))}Ee.tbody=Ee.tfoot=Ee.colgroup=Ee.caption=Ee.thead,Ee.th=Ee.td,v.option||(Ee.optgroup=Ee.option=[1,"<select multiple='multiple'>","</select>"]);var De=/<|&#?\w+;/;function He(e,t,n,i,o){for(var r,s,a,l,c,d,u=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((r=e[f])||0===r)if("object"===T(r))C.merge(p,r.nodeType?[r]:r);else if(De.test(r)){for(s=s||u.appendChild(t.createElement("div")),a=($e.exec(r)||["",""])[1].toLowerCase(),l=Ee[a]||Ee._default,s.innerHTML=l[1]+C.htmlPrefilter(r)+l[2],d=l[0];d--;)s=s.lastChild;C.merge(p,s.childNodes),(s=u.firstChild).textContent=""}else p.push(t.createTextNode(r));for(u.textContent="",f=0;r=p[f++];)if(i&&C.inArray(r,i)>-1)o&&o.push(r);else if(c=ve(r),s=Le(u.appendChild(r),"script"),c&&je(s),n)for(d=0;r=s[d++];)Ae.test(r.type||"")&&n.push(r);return u}var Oe=/^([^.]*)(?:\.(.+)|)/;function Pe(){return!0}function Ne(){return!1}function Me(e,t,n,i,o,r){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Me(e,a,n,i,t[a],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=Ne;else if(!o)return e;return 1===r&&(s=o,o=function(e){return C().off(e),s.apply(this,arguments)},o.guid=s.guid||(s.guid=C.guid++)),e.each((function(){C.event.add(this,t,o,i,n)}))}function qe(e,t,n){n?(ae.set(e,t,!1),C.event.add(e,t,{namespace:!1,handler:function(e){var n,i=ae.get(this,t);if(1&e.isTrigger&&this[t]){if(i)(C.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),ae.set(this,t,i),this[t](),n=ae.get(this,t),ae.set(this,t,!1),i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n}else i&&(ae.set(this,t,C.event.trigger(i[0],i.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=Pe)}})):void 0===ae.get(e,t)&&C.event.add(e,t,Pe)}C.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,d,u,p,f,h,g,v=ae.get(e);if(re(e))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&C.find.matchesSelector(ge,o),n.guid||(n.guid=C.guid++),(l=v.events)||(l=v.events=Object.create(null)),(s=v.handle)||(s=v.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(Y)||[""]).length;c--;)f=g=(a=Oe.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(u=C.event.special[f]||{},f=(o?u.delegateType:u.bindType)||f,u=C.event.special[f]||{},d=C.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&C.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(f,s)),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,d):p.push(d),C.event.global[f]=!0)},remove:function(e,t,n,i,o){var r,s,a,l,c,d,u,p,f,h,g,v=ae.hasData(e)&&ae.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(Y)||[""]).length;c--;)if(f=g=(a=Oe.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(u=C.event.special[f]||{},p=l[f=(i?u.delegateType:u.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)d=p[r],!o&&g!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(r,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));s&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,h,v.handle)||C.removeEvent(e,f,v.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[c],n,i,!0);C.isEmptyObject(l)&&ae.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,s,a=new Array(arguments.length),l=C.event.fix(e),c=(ae.get(this,"events")||Object.create(null))[l.type]||[],d=C.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(s=C.event.handlers.call(this,l,c),t=0;(o=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((C.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,o,r,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=t[n]).selector+" "]&&(s[o]=i.needsContext?C(o,this).index(c)>-1:C.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return Ce.test(t.type)&&t.click&&A(t,"input")&&qe(t,"click",!0),!1},trigger:function(e){var t=this||e;return Ce.test(t.type)&&t.click&&A(t,"input")&&qe(t,"click"),!0},_default:function(e){var t=e.target;return Ce.test(t.type)&&t.click&&A(t,"input")&&ae.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Pe:Ne,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Ne,isPropagationStopped:Ne,isImmediatePropagationStopped:Ne,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Pe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Pe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Pe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},(function(e,t){function n(e){if(w.documentMode){var n=ae.get(this,"handle"),i=C.event.fix(e);i.type="focusin"===e.type?"focus":"blur",i.isSimulated=!0,n(e),i.target===i.currentTarget&&n(i)}else C.event.simulate(t,e.target,C.event.fix(e))}C.event.special[e]={setup:function(){var i;if(qe(this,e,!0),!w.documentMode)return!1;(i=ae.get(this,t))||this.addEventListener(t,n),ae.set(this,t,(i||0)+1)},trigger:function(){return qe(this,e),!0},teardown:function(){var e;if(!w.documentMode)return!1;(e=ae.get(this,t)-1)?ae.set(this,t,e):(this.removeEventListener(t,n),ae.remove(this,t))},_default:function(t){return ae.get(t.target,e)},delegateType:t},C.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,o=w.documentMode?this:i,r=ae.get(o,t);r||(w.documentMode?this.addEventListener(t,n):i.addEventListener(e,n,!0)),ae.set(o,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,o=w.documentMode?this:i,r=ae.get(o,t)-1;r?ae.set(o,t,r):(w.documentMode?this.removeEventListener(t,n):i.removeEventListener(e,n,!0),ae.remove(o,t))}}})),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,o=e.handleObj;return i&&(i===this||C.contains(this,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),C.fn.extend({on:function(e,t,n,i){return Me(this,e,t,n,i)},one:function(e,t,n,i){return Me(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ne),this.each((function(){C.event.remove(this,e,n,t)}))}});var Re=/<script|<style|<link/i,Ie=/checked\s*(?:[^=]|=\s*.checked.)/i,ze=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function We(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Ue(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Be(e,t){var n,i,o,r,s,a;if(1===t.nodeType){if(ae.hasData(e)&&(a=ae.get(e).events))for(o in ae.remove(t,"handle events"),a)for(n=0,i=a[o].length;n<i;n++)C.event.add(t,o,a[o][n]);le.hasData(e)&&(r=le.access(e),s=C.extend({},r),le.set(t,s))}}function _e(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ce.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Xe(e,t,n,i){t=l(t);var o,r,s,a,c,d,u=0,p=e.length,f=p-1,h=t[0],g=y(h);if(g||p>1&&"string"==typeof h&&!v.checkClone&&Ie.test(h))return e.each((function(o){var r=e.eq(o);g&&(t[0]=h.call(this,o,r.html())),Xe(r,t,n,i)}));if(p&&(r=(o=He(t,e[0].ownerDocument,!1,e,i)).firstChild,1===o.childNodes.length&&(o=r),r||i)){for(a=(s=C.map(Le(o,"script"),Ue)).length;u<p;u++)c=o,u!==f&&(c=C.clone(c,!0,!0),a&&C.merge(s,Le(c,"script"))),n.call(e[u],c,u);if(a)for(d=s[s.length-1].ownerDocument,C.map(s,Fe),u=0;u<a;u++)c=s[u],Ae.test(c.type||"")&&!ae.access(c,"globalEval")&&C.contains(d,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?C._evalUrl&&!c.noModule&&C._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},d):x(c.textContent.replace(ze,""),c,d))}return e}function Ye(e,t,n){for(var i,o=t?C.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||C.cleanData(Le(i)),i.parentNode&&(n&&ve(i)&&je(Le(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,s,a=e.cloneNode(!0),l=ve(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=Le(a),i=0,o=(r=Le(e)).length;i<o;i++)_e(r[i],s[i]);if(t)if(n)for(r=r||Le(e),s=s||Le(a),i=0,o=r.length;i<o;i++)Be(r[i],s[i]);else Be(e,a);return(s=Le(a,"script")).length>0&&je(s,!l&&Le(e,"script")),a},cleanData:function(e){for(var t,n,i,o=C.event.special,r=0;void 0!==(n=e[r]);r++)if(re(n)){if(t=n[ae.expando]){if(t.events)for(i in t.events)o[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[ae.expando]=void 0}n[le.expando]&&(n[le.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Ye(this,e,!0)},remove:function(e){return Ye(this,e)},text:function(e){return ee(this,(function(e){return void 0===e?C.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Xe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||We(this,e).appendChild(e)}))},prepend:function(){return Xe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=We(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Xe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Xe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(Le(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return C.clone(this,e,t)}))},html:function(e){return ee(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Re.test(e)&&!Ee[($e.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(Le(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Xe(this,arguments,(function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(Le(this)),n&&n.replaceChild(t,this))}),e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){C.fn[e]=function(e){for(var n,i=[],o=C(e),r=o.length-1,s=0;s<=r;s++)n=s===r?this:this.clone(!0),C(o[s])[t](n),c.apply(i,n.get());return this.pushStack(i)}}));var Ve=new RegExp("^("+pe+")(?!px)[a-z%]+$","i"),Ge=/^--/,Qe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},Je=function(e,t,n){var i,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];for(o in i=n.call(e),t)e.style[o]=r[o];return i},Ke=new RegExp(he.join("|"),"i");function Ze(e,t,n){var i,o,r,s,a=Ge.test(t),l=e.style;return(n=n||Qe(e))&&(s=n.getPropertyValue(t)||n[t],a&&s&&(s=s.replace(H,"$1")||void 0),""!==s||ve(e)||(s=C.style(e,t)),!v.pixelBoxStyles()&&Ve.test(s)&&Ke.test(t)&&(i=l.width,o=l.minWidth,r=l.maxWidth,l.minWidth=l.maxWidth=l.width=s,s=n.width,l.width=i,l.minWidth=o,l.maxWidth=r)),void 0!==s?s+"":s}function et(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ge.appendChild(c).appendChild(d);var e=i.getComputedStyle(d);n="1%"!==e.top,l=12===t(e.marginLeft),d.style.right="60%",s=36===t(e.right),o=36===t(e.width),d.style.position="absolute",r=12===t(d.offsetWidth/3),ge.removeChild(c),d=null}}function t(e){return Math.round(parseFloat(e))}var n,o,r,s,a,l,c=w.createElement("div"),d=w.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===d.style.backgroundClip,C.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),r},reliableTrDimensions:function(){var e,t,n,o;return null==a&&(e=w.createElement("table"),t=w.createElement("tr"),n=w.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ge.appendChild(e).appendChild(t).appendChild(n),o=i.getComputedStyle(t),a=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,ge.removeChild(e)),a}}))}();var tt=["Webkit","Moz","ms"],nt=w.createElement("div").style,it={};function ot(e){return C.cssProps[e]||it[e]||(e in nt?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=tt.length;n--;)if((e=tt[n]+t)in nt)return e}(e)||e)}var rt=/^(none|table(?!-c[ea]).+)/,st={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function lt(e,t,n){var i=fe.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ct(e,t,n,i,o,r){var s="width"===t?1:0,a=0,l=0,c=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(c+=C.css(e,n+he[s],!0,o)),i?("content"===n&&(l-=C.css(e,"padding"+he[s],!0,o)),"margin"!==n&&(l-=C.css(e,"border"+he[s]+"Width",!0,o))):(l+=C.css(e,"padding"+he[s],!0,o),"padding"!==n?l+=C.css(e,"border"+he[s]+"Width",!0,o):a+=C.css(e,"border"+he[s]+"Width",!0,o));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l+c}function dt(e,t,n){var i=Qe(e),o=(!v.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,i),r=o,s=Ze(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ve.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&o||!v.reliableTrDimensions()&&A(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===C.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===C.css(e,"boxSizing",!1,i),(r=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+ct(e,t,n||(o?"border":"content"),r,i,s)+"px"}function ut(e,t,n,i,o){return new ut.prototype.init(e,t,n,i,o)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,s,a=oe(t),l=Ge.test(t),c=e.style;if(l||(t=ot(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(e,!1,i))?o:c[t];"string"==(r=typeof n)&&(o=fe.exec(n))&&o[1]&&(n=we(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(C.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,s,a=oe(t);return Ge.test(t)||(t=ot(a)),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,n)),void 0===o&&(o=Ze(e,t,i)),"normal"===o&&t in at&&(o=at[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),C.each(["height","width"],(function(e,t){C.cssHooks[t]={get:function(e,n,i){if(n)return!rt.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?dt(e,t,i):Je(e,st,(function(){return dt(e,t,i)}))},set:function(e,n,i){var o,r=Qe(e),s=!v.scrollboxSize()&&"absolute"===r.position,a=(s||i)&&"border-box"===C.css(e,"boxSizing",!1,r),l=i?ct(e,t,i,a,r):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-ct(e,t,"border",!1,r)-.5)),l&&(o=fe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),lt(0,n,l)}}})),C.cssHooks.marginLeft=et(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ze(e,"marginLeft"))||e.getBoundingClientRect().left-Je(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),C.each({margin:"",padding:"",border:"Width"},(function(e,t){C.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+he[i]+t]=r[i]||r[i-2]||r[0];return o}},"margin"!==e&&(C.cssHooks[e+t].set=lt)})),C.fn.extend({css:function(e,t){return ee(this,(function(e,t,n){var i,o,r={},s=0;if(Array.isArray(t)){for(i=Qe(e),o=t.length;s<o;s++)r[t[s]]=C.css(e,t[s],!1,i);return r}return void 0!==n?C.style(e,t,n):C.css(e,t)}),e,t,arguments.length>1)}}),C.Tween=ut,ut.prototype={constructor:ut,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(C.cssNumber[n]?"":"px")},cur:function(){var e=ut.propHooks[this.prop];return e&&e.get?e.get(this):ut.propHooks._default.get(this)},run:function(e){var t,n=ut.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ut.propHooks._default.set(this),this}},ut.prototype.init.prototype=ut.prototype,ut.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[ot(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},ut.propHooks.scrollTop=ut.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=ut.prototype.init,C.fx.step={};var pt,ft,ht=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function vt(){ft&&(!1===w.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(vt):i.setTimeout(vt,C.fx.interval),C.fx.tick())}function yt(){return i.setTimeout((function(){pt=void 0})),pt=Date.now()}function mt(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=he[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function wt(e,t,n){for(var i,o=(bt.tweeners[t]||[]).concat(bt.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,t,e))return i}function bt(e,t,n){var i,o,r=0,s=bt.prefilters.length,a=C.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=pt||yt(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),r=0,s=c.tweens.length;r<s;r++)c.tweens[r].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||yt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=C.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),d=c.props;for(function(e,t){var n,i,o,r,s;for(n in e)if(o=t[i=oe(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=C.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(d,c.opts.specialEasing);r<s;r++)if(i=bt.prefilters[r].call(c,e,d,c.opts))return y(i.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return C.map(d,wt,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(bt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return we(n.elem,e,fe.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(Y);for(var n,i=0,o=e.length;i<o;i++)n=e[i],bt.tweeners[n]=bt.tweeners[n]||[],bt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,s,a,l,c,d,u="width"in t||"height"in t,p=this,f={},h=e.style,g=e.nodeType&&me(e),v=ae.get(e,"fxshow");for(i in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()}))}))),t)if(o=t[i],ht.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!v||void 0===v[i])continue;g=!0}f[i]=v&&v[i]||C.style(e,i)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(f))for(i in u&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=ae.get(e,"display")),"none"===(d=C.css(e,"display"))&&(c?d=c:(Te([e],!0),c=e.style.display||c,d=C.css(e,"display"),Te([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===C.css(e,"float")&&(l||(p.done((function(){h.display=c})),null==c&&(d=h.display,c="none"===d?"":d)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(v?"hidden"in v&&(g=v.hidden):v=ae.access(e,"fxshow",{display:c}),r&&(v.hidden=!g),g&&Te([e],!0),p.done((function(){for(i in g||Te([e]),ae.remove(e,"fxshow"),f)C.style(e,i,f[i])}))),l=wt(g?v[i]:0,i,p),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?bt.prefilters.unshift(e):bt.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(me).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=C.isEmptyObject(e),r=C.speed(t,n,i),s=function(){var t=bt(this,C.extend({},e),r);(o||ae.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===r.queue?this.each(s):this.queue(r.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",r=C.timers,s=ae.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&gt.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||C.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=ae.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=C.timers,s=i?i.length:0;for(n.finish=!0,C.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),C.each(["toggle","show","hide"],(function(e,t){var n=C.fn[t];C.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(mt(t,!0),e,i,o)}})),C.each({slideDown:mt("show"),slideUp:mt("hide"),slideToggle:mt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){C.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(pt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),pt=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){ft||(ft=!0,vt())},C.fx.stop=function(){ft=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(o)}}))},function(){var e=w.createElement("input"),t=w.createElement("select").appendChild(w.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=w.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var xt,Tt=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return ee(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){C.removeAttr(this,e)}))}}),C.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?C.prop(e,t,n):(1===r&&C.isXMLDoc(e)||(o=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?xt:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(Y);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),xt={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=Tt[t]||C.find.attr;Tt[t]=function(e,t,i){var o,r,s=t.toLowerCase();return i||(r=Tt[s],Tt[s]=o,o=null!=n(e,t,i)?s:null,Tt[s]=r),o}}));var kt=/^(?:input|select|textarea|button)$/i,St=/^(?:a|area)$/i;function Ct(e){return(e.match(Y)||[]).join(" ")}function $t(e){return e.getAttribute&&e.getAttribute("class")||""}function At(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Y)||[]}C.fn.extend({prop:function(e,t){return ee(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[C.propFix[e]||e]}))}}),C.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&C.isXMLDoc(e)||(t=C.propFix[t]||t,o=C.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):kt.test(e.nodeName)||St.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){C.propFix[this.toLowerCase()]=this})),C.fn.extend({addClass:function(e){var t,n,i,o,r,s;return y(e)?this.each((function(t){C(this).addClass(e.call(this,t,$t(this)))})):(t=At(e)).length?this.each((function(){if(i=$t(this),n=1===this.nodeType&&" "+Ct(i)+" "){for(r=0;r<t.length;r++)o=t[r],n.indexOf(" "+o+" ")<0&&(n+=o+" ");s=Ct(n),i!==s&&this.setAttribute("class",s)}})):this},removeClass:function(e){var t,n,i,o,r,s;return y(e)?this.each((function(t){C(this).removeClass(e.call(this,t,$t(this)))})):arguments.length?(t=At(e)).length?this.each((function(){if(i=$t(this),n=1===this.nodeType&&" "+Ct(i)+" "){for(r=0;r<t.length;r++)for(o=t[r];n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");s=Ct(n),i!==s&&this.setAttribute("class",s)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,i,o,r,s=typeof e,a="string"===s||Array.isArray(e);return y(e)?this.each((function(n){C(this).toggleClass(e.call(this,n,$t(this),t),t)})):"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):(n=At(e),this.each((function(){if(a)for(r=C(this),o=0;o<n.length;o++)i=n[o],r.hasClass(i)?r.removeClass(i):r.addClass(i);else void 0!==e&&"boolean"!==s||((i=$t(this))&&ae.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",i||!1===e?"":ae.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+Ct($t(n))+" ").indexOf(t)>-1)return!0;return!1}});var Et=/\r/g;C.fn.extend({val:function(e){var t,n,i,o=this[0];return arguments.length?(i=y(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=i?e.call(this,n,C(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=C.map(o,(function(e){return null==e?"":e+""}))),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=C.valHooks[o.type]||C.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Et,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:Ct(C.text(e))}},select:{get:function(e){var t,n,i,o=e.options,r=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=C(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,o=e.options,r=C.makeArray(t),s=o.length;s--;)((i=o[s]).selected=C.inArray(C.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),C.each(["radio","checkbox"],(function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},v.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}));var Lt=i.location,jt={guid:Date.now()},Dt=/\?/;C.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||C.error("Invalid XML: "+(n?C.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Ht=/^(?:focusinfocus|focusoutblur)$/,Ot=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,n,o){var r,s,a,l,c,d,u,p,h=[n||w],g=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(s=p=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!Ht.test(g+C.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[C.expando]?e:new C.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),u=C.event.special[g]||{},o||!u.trigger||!1!==u.trigger.apply(n,t))){if(!o&&!u.noBubble&&!m(n)){for(l=u.delegateType||g,Ht.test(l+g)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||w)&&h.push(a.defaultView||a.parentWindow||i)}for(r=0;(s=h[r++])&&!e.isPropagationStopped();)p=s,e.type=r>1?l:u.bindType||g,(d=(ae.get(s,"events")||Object.create(null))[e.type]&&ae.get(s,"handle"))&&d.apply(s,t),(d=c&&s[c])&&d.apply&&re(s)&&(e.result=d.apply(s,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(h.pop(),t)||!re(n)||c&&y(n[g])&&!m(n)&&((a=n[c])&&(n[c]=null),C.event.triggered=g,e.isPropagationStopped()&&p.addEventListener(g,Ot),n[g](),e.isPropagationStopped()&&p.removeEventListener(g,Ot),C.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(e,t,n){var i=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(i,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each((function(){C.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}});var Pt=/\[\]$/,Nt=/\r?\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,qt=/^(?:input|select|textarea|keygen)/i;function Rt(e,t,n,i){var o;if(Array.isArray(t))C.each(t,(function(t,o){n||Pt.test(e)?i(e,o):Rt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)}));else if(n||"object"!==T(t))i(e,t);else for(o in t)Rt(e+"["+o+"]",t[o],n,i)}C.param=function(e,t){var n,i=[],o=function(e,t){var n=y(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,(function(){o(this.name,this.value)}));else for(n in e)Rt(n,e[n],t,o);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&qt.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!Ce.test(e))})).map((function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,(function(e){return{name:t.name,value:e.replace(Nt,"\r\n")}})):{name:t.name,value:n.replace(Nt,"\r\n")}})).get()}});var It=/%20/g,zt=/#.*$/,Wt=/([?&])_=[^&]*/,Ut=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ft=/^(?:GET|HEAD)$/,Bt=/^\/\//,_t={},Xt={},Yt="*/".concat("*"),Vt=w.createElement("a");function Gt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(Y)||[];if(y(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Qt(e,t,n,i){var o={},r=e===Xt;function s(a){var l;return o[a]=!0,C.each(e[a]||[],(function(e,a){var c=a(t,n,i);return"string"!=typeof c||r||o[c]?r?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Jt(e,t){var n,i,o=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&C.extend(!0,e,i),e}Vt.href=Lt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Lt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Lt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Yt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,C.ajaxSettings),t):Jt(C.ajaxSettings,e)},ajaxPrefilter:Gt(_t),ajaxTransport:Gt(Xt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,r,s,a,l,c,d,u,p,f=C.ajaxSetup({},t),h=f.context||f,g=f.context&&(h.nodeType||h.jquery)?C(h):C.event,v=C.Deferred(),y=C.Callbacks("once memory"),m=f.statusCode||{},b={},x={},T="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Ut.exec(r);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)k.always(e[k.status]);else for(t in e)m[t]=[m[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),S(0,t),this}};if(v.promise(k),f.url=((e||f.url||Lt.href)+"").replace(Bt,Lt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(Y)||[""],null==f.crossDomain){l=w.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Vt.protocol+"//"+Vt.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=C.param(f.data,f.traditional)),Qt(_t,f,t,k),c)return k;for(u in(d=C.event&&f.global)&&0==C.active++&&C.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Ft.test(f.type),o=f.url.replace(zt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(It,"+")):(p=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(Dt.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(Wt,"$1"),p=(Dt.test(o)?"&":"?")+"_="+jt.guid+++p),f.url=o+p),f.ifModified&&(C.lastModified[o]&&k.setRequestHeader("If-Modified-Since",C.lastModified[o]),C.etag[o]&&k.setRequestHeader("If-None-Match",C.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&k.setRequestHeader("Content-Type",f.contentType),k.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Yt+"; q=0.01":""):f.accepts["*"]),f.headers)k.setRequestHeader(u,f.headers[u]);if(f.beforeSend&&(!1===f.beforeSend.call(h,k,f)||c))return k.abort();if(T="abort",y.add(f.complete),k.done(f.success),k.fail(f.error),n=Qt(Xt,f,t,k)){if(k.readyState=1,d&&g.trigger("ajaxSend",[k,f]),c)return k;f.async&&f.timeout>0&&(a=i.setTimeout((function(){k.abort("timeout")}),f.timeout));try{c=!1,n.send(b,S)}catch(e){if(c)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,s,l){var u,p,w,b,x,T=t;c||(c=!0,a&&i.clearTimeout(a),n=void 0,r=l||"",k.readyState=e>0?4:0,u=e>=200&&e<300||304===e,s&&(b=function(e,t,n){for(var i,o,r,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(f,k,s)),!u&&C.inArray("script",f.dataTypes)>-1&&C.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),b=function(e,t,n,i){var o,r,s,a,l,c={},d=e.dataTypes.slice();if(d[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(r=d.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=d.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],d.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(f,b,k,u),u?(f.ifModified&&((x=k.getResponseHeader("Last-Modified"))&&(C.lastModified[o]=x),(x=k.getResponseHeader("etag"))&&(C.etag[o]=x)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=b.state,p=b.data,u=!(w=b.error))):(w=T,!e&&T||(T="error",e<0&&(e=0))),k.status=e,k.statusText=(t||T)+"",u?v.resolveWith(h,[p,T,k]):v.rejectWith(h,[k,T,w]),k.statusCode(m),m=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[k,f,u?p:w]),y.fireWith(h,[k,T]),d&&(g.trigger("ajaxComplete",[k,f]),--C.active||C.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],(function(e,t){C[t]=function(e,n,i,o){return y(n)&&(o=o||i,i=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:o,data:n,success:i},C.isPlainObject(e)&&e))}})),C.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){C(this).wrapInner(e.call(this,t))})):this.each((function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){C(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){C(this).replaceWith(this.childNodes)})),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Kt={0:200,1223:204},Zt=C.ajaxSettings.xhr();v.cors=!!Zt&&"withCredentials"in Zt,v.ajax=Zt=!!Zt,C.ajaxTransport((function(e){var t,n;if(v.cors||Zt&&!e.crossDomain)return{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Kt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),C.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),C.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,o){t=C("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),w.head.appendChild(t[0])},abort:function(){n&&n()}}}));var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||C.expando+"_"+jt.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",(function(e,t,n){var o,r,s,a=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(nn,"$1"+o):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||C.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=i[o],i[o]=function(){s=arguments},n.always((function(){void 0===r?C(i).removeProp(o):i[o]=r,e[o]&&(e.jsonpCallback=t.jsonpCallback,tn.push(o)),s&&y(r)&&r(s[0]),s=r=void 0})),"script"})),v.createHTMLDocument=((en=w.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=w.implementation.createHTMLDocument("")).createElement("base")).href=w.location.href,t.head.appendChild(i)):t=w),r=!n&&[],(o=z.exec(e))?[t.createElement(o[1])]:(o=He([e],t,r),r&&r.length&&C(r).remove(),C.merge([],o.childNodes)));var i,o,r},C.fn.load=function(e,t,n){var i,o,r,s=this,a=e.indexOf(" ");return a>-1&&(i=Ct(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&C.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){r=arguments,s.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,r||[e.responseText,t,e])}))}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,(function(t){return e===t.elem})).length},C.offset={setOffset:function(e,t,n){var i,o,r,s,a,l,c=C.css(e,"position"),d=C(e),u={};"static"===c&&(e.style.position="relative"),a=d.offset(),r=C.css(e,"top"),l=C.css(e,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(s=(i=d.position()).top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),y(t)&&(t=t.call(e,n,C.extend({},a))),null!=t.top&&(u.top=t.top-a.top+s),null!=t.left&&(u.left=t.left-a.left+o),"using"in t?t.using.call(e,u):d.css(u)}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){C.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===C.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),o.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-C.css(i,"marginTop",!0),left:t.left-o.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||ge}))}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;C.fn[e]=function(i){return ee(this,(function(e,i,o){var r;if(m(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o}),e,i,arguments.length)}})),C.each(["top","left"],(function(e,t){C.cssHooks[t]=et(v.pixelPosition,(function(e,n){if(n)return n=Ze(e,t),Ve.test(n)?C(e).position()[t]+"px":n}))})),C.each({Height:"height",Width:"width"},(function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){C.fn[i]=function(o,r){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===r?"margin":"border");return ee(this,(function(t,n,o){var r;return m(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?C.css(t,n,a):C.style(t,n,o,a)}),t,s?o:void 0,s)}}))})),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){C.fn[t]=function(e){return this.on(t,e)}})),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var on=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;C.proxy=function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return i=a.call(arguments,2),o=function(){return e.apply(t||this,i.concat(a.call(arguments)))},o.guid=e.guid=e.guid||C.guid++,o},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=A,C.isFunction=y,C.isWindow=m,C.camelCase=oe,C.type=T,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(on,"$1")},void 0===(n=function(){return C}.apply(t,[]))||(e.exports=n);var rn=i.jQuery,sn=i.$;return C.noConflict=function(e){return i.$===C&&(i.$=sn),e&&i.jQuery===C&&(i.jQuery=rn),C},void 0===o&&(i.jQuery=i.$=C),C}))},154:(e,t,n)=>{var i,o,r;!function(s){"use strict";o=[n(755)],i=function(e){var t,n=window.Slick||{};(t=0,n=function(n,i){var o,r=this;r.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(n),appendDots:e(n),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,n){return e('<button type="button" />').text(n+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},r.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(r,r.initials),r.activeBreakpoint=null,r.animType=null,r.animProp=null,r.breakpoints=[],r.breakpointSettings=[],r.cssTransitions=!1,r.focussed=!1,r.interrupted=!1,r.hidden="hidden",r.paused=!0,r.positionProp=null,r.respondTo=null,r.rowCount=1,r.shouldClick=!0,r.$slider=e(n),r.$slidesCache=null,r.transformType=null,r.transitionType=null,r.visibilityChange="visibilitychange",r.windowWidth=0,r.windowTimer=null,o=e(n).data("slick")||{},r.options=e.extend({},r.defaults,i,o),r.currentSlide=r.options.initialSlide,r.originalSettings=r.options,void 0!==document.mozHidden?(r.hidden="mozHidden",r.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(r.hidden="webkitHidden",r.visibilityChange="webkitvisibilitychange"),r.autoPlay=e.proxy(r.autoPlay,r),r.autoPlayClear=e.proxy(r.autoPlayClear,r),r.autoPlayIterator=e.proxy(r.autoPlayIterator,r),r.changeSlide=e.proxy(r.changeSlide,r),r.clickHandler=e.proxy(r.clickHandler,r),r.selectHandler=e.proxy(r.selectHandler,r),r.setPosition=e.proxy(r.setPosition,r),r.swipeHandler=e.proxy(r.swipeHandler,r),r.dragHandler=e.proxy(r.dragHandler,r),r.keyHandler=e.proxy(r.keyHandler,r),r.instanceUid=t++,r.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,r.registerBreakpoints(),r.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},n.prototype.addSlide=n.prototype.slickAdd=function(t,n,i){var o=this;if("boolean"==typeof n)i=n,n=null;else if(n<0||n>=o.slideCount)return!1;o.unload(),"number"==typeof n?0===n&&0===o.$slides.length?e(t).appendTo(o.$slideTrack):i?e(t).insertBefore(o.$slides.eq(n)):e(t).insertAfter(o.$slides.eq(n)):!0===i?e(t).prependTo(o.$slideTrack):e(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each((function(t,n){e(n).attr("data-slick-index",t)})),o.$slidesCache=o.$slides,o.reinit()},n.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:t},e.options.speed)}},n.prototype.animateSlide=function(t,n){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,n):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,n):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),e({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(e){e=Math.ceil(e),!1===o.options.vertical?(i[o.animType]="translate("+e+"px, 0px)",o.$slideTrack.css(i)):(i[o.animType]="translate(0px,"+e+"px)",o.$slideTrack.css(i))},complete:function(){n&&n.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),n&&setTimeout((function(){o.disableTransition(),n.call()}),o.options.speed))},n.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=e(t).not(this.$slider)),t},n.prototype.asNavFor=function(t){var n=this.getNavTarget();null!==n&&"object"==typeof n&&n.each((function(){var n=e(this).slick("getSlick");n.unslicked||n.slideHandler(t,!0)}))},n.prototype.applyTransition=function(e){var t=this,n={};!1===t.options.fade?n[t.transitionType]=t.transformType+" "+t.options.speed+"ms "+t.options.cssEase:n[t.transitionType]="opacity "+t.options.speed+"ms "+t.options.cssEase,!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},n.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},n.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},n.prototype.autoPlayIterator=function(){var e=this,t=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(t=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(t))},n.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=e(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=e(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},n.prototype.buildDots=function(){var t,n,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),n=e("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)n.append(e("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=n.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},n.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each((function(t,n){e(n).attr("data-slick-index",t).data("originalStyling",e(n).attr("style")||"")})),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?e('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),e("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},n.prototype.buildRows=function(){var e,t,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),a.options.rows>0){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),e=0;e<o;e++){var l=document.createElement("div");for(t=0;t<a.options.rows;t++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var d=e*s+(t*a.options.slidesPerRow+n);r.get(d)&&c.appendChild(r.get(d))}l.appendChild(c)}i.appendChild(l)}a.$slider.empty().append(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},n.prototype.checkResponsive=function(t,n){var i,o,r,s=this,a=!1,l=s.$slider.width(),c=window.innerWidth||e(window).width();if("window"===s.respondTo?r=c:"slider"===s.respondTo?r=l:"min"===s.respondTo&&(r=Math.min(c,l)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(i in o=null,s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?r<s.breakpoints[i]&&(o=s.breakpoints[i]):r>s.breakpoints[i]&&(o=s.breakpoints[i]));null!==o?null!==s.activeBreakpoint?(o!==s.activeBreakpoint||n)&&(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=e.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),a=o):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),a=o),t||!1===a||s.$slider.trigger("breakpoint",[s,a])}},n.prototype.changeSlide=function(t,n){var i,o,r=this,s=e(t.currentTarget);switch(s.is("a")&&t.preventDefault(),s.is("li")||(s=s.closest("li")),i=r.slideCount%r.options.slidesToScroll!=0?0:(r.slideCount-r.currentSlide)%r.options.slidesToScroll,t.data.message){case"previous":o=0===i?r.options.slidesToScroll:r.options.slidesToShow-i,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide-o,!1,n);break;case"next":o=0===i?r.options.slidesToScroll:i,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide+o,!1,n);break;case"index":var a=0===t.data.index?0:t.data.index||s.index()*r.options.slidesToScroll;r.slideHandler(r.checkNavigable(a),!1,n),s.children().trigger("focus");break;default:return}},n.prototype.checkNavigable=function(e){var t,n;if(n=0,e>(t=this.getNavigableIndexes())[t.length-1])e=t[t.length-1];else for(var i in t){if(e<t[i]){e=n;break}n=t[i]}return e},n.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(e("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",e.proxy(t.interrupt,t,!0)).off("mouseleave.slick",e.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),e(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().off("click.slick",t.selectHandler),e(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),e(window).off("resize.slick.slick-"+t.instanceUid,t.resize),e("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),e(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},n.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",e.proxy(t.interrupt,t,!1))},n.prototype.cleanUpRows=function(){var e,t=this;t.options.rows>0&&((e=t.$slides.children().children()).removeAttr("style"),t.$slider.empty().append(e))},n.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},n.prototype.destroy=function(t){var n=this;n.autoPlayClear(),n.touchObject={},n.cleanUpEvents(),e(".slick-cloned",n.$slider).detach(),n.$dots&&n.$dots.remove(),n.$prevArrow&&n.$prevArrow.length&&(n.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.prevArrow)&&n.$prevArrow.remove()),n.$nextArrow&&n.$nextArrow.length&&(n.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),n.htmlExpr.test(n.options.nextArrow)&&n.$nextArrow.remove()),n.$slides&&(n.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each((function(){e(this).attr("style",e(this).data("originalStyling"))})),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.detach(),n.$list.detach(),n.$slider.append(n.$slides)),n.cleanUpRows(),n.$slider.removeClass("slick-slider"),n.$slider.removeClass("slick-initialized"),n.$slider.removeClass("slick-dotted"),n.unslicked=!0,t||n.$slider.trigger("destroy",[n])},n.prototype.disableTransition=function(e){var t=this,n={};n[t.transitionType]="",!1===t.options.fade?t.$slideTrack.css(n):t.$slides.eq(e).css(n)},n.prototype.fadeSlide=function(e,t){var n=this;!1===n.cssTransitions?(n.$slides.eq(e).css({zIndex:n.options.zIndex}),n.$slides.eq(e).animate({opacity:1},n.options.speed,n.options.easing,t)):(n.applyTransition(e),n.$slides.eq(e).css({opacity:1,zIndex:n.options.zIndex}),t&&setTimeout((function(){n.disableTransition(e),t.call()}),n.options.speed))},n.prototype.fadeSlideOut=function(e){var t=this;!1===t.cssTransitions?t.$slides.eq(e).animate({opacity:0,zIndex:t.options.zIndex-2},t.options.speed,t.options.easing):(t.applyTransition(e),t.$slides.eq(e).css({opacity:0,zIndex:t.options.zIndex-2}))},n.prototype.filterSlides=n.prototype.slickFilter=function(e){var t=this;null!==e&&(t.$slidesCache=t.$slides,t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.filter(e).appendTo(t.$slideTrack),t.reinit())},n.prototype.focusHandler=function(){var t=this;t.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",(function(n){n.stopImmediatePropagation();var i=e(this);setTimeout((function(){t.options.pauseOnFocus&&(t.focussed=i.is(":focus"),t.autoPlay())}),0)}))},n.prototype.getCurrent=n.prototype.slickCurrentSlide=function(){return this.currentSlide},n.prototype.getDotCount=function(){var e=this,t=0,n=0,i=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++i;else for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)i=e.slideCount;else if(e.options.asNavFor)for(;t<e.slideCount;)++i,t=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else i=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return i-1},n.prototype.getLeft=function(e){var t,n,i,o,r=this,s=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&e+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(e>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(e-r.slideCount))*r.slideWidth*-1,s=(r.options.slidesToShow-(e-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,s=r.slideCount%r.options.slidesToScroll*n*-1))):e+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(e+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(e+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(r.slideOffset=0,s=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),t=!1===r.options.vertical?e*r.slideWidth*-1+r.slideOffset:e*n*-1+s,!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(e):r.$slideTrack.children(".slick-slide").eq(e+r.options.slidesToShow+1),t=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,t+=(r.$list.width()-i.outerWidth())/2)),t},n.prototype.getOption=n.prototype.slickGetOption=function(e){return this.options[e]},n.prototype.getNavigableIndexes=function(){var e,t=this,n=0,i=0,o=[];for(!1===t.options.infinite?e=t.slideCount:(n=-1*t.options.slidesToScroll,i=-1*t.options.slidesToScroll,e=2*t.slideCount);n<e;)o.push(n),n=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return o},n.prototype.getSlick=function(){return this},n.prototype.getSlideCount=function(){var t,n,i=this;return n=!0===i.options.centerMode?i.slideWidth*Math.floor(i.options.slidesToShow/2):0,!0===i.options.swipeToSlide?(i.$slideTrack.find(".slick-slide").each((function(o,r){if(r.offsetLeft-n+e(r).outerWidth()/2>-1*i.swipeLeft)return t=r,!1})),Math.abs(e(t).attr("data-slick-index")-i.currentSlide)||1):i.options.slidesToScroll},n.prototype.goTo=n.prototype.slickGoTo=function(e,t){this.changeSlide({data:{message:"index",index:parseInt(e)}},t)},n.prototype.init=function(t){var n=this;e(n.$slider).hasClass("slick-initialized")||(e(n.$slider).addClass("slick-initialized"),n.buildRows(),n.buildOut(),n.setProps(),n.startLoad(),n.loadSlider(),n.initializeEvents(),n.updateArrows(),n.updateDots(),n.checkResponsive(!0),n.focusHandler()),t&&n.$slider.trigger("init",[n]),!0===n.options.accessibility&&n.initADA(),n.options.autoplay&&(n.paused=!1,n.autoPlay())},n.prototype.initADA=function(){var t=this,n=Math.ceil(t.slideCount/t.options.slidesToShow),i=t.getNavigableIndexes().filter((function(e){return e>=0&&e<t.slideCount}));t.$slides.add(t.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==t.$dots&&(t.$slides.not(t.$slideTrack.find(".slick-cloned")).each((function(n){var o=i.indexOf(n);if(e(this).attr({role:"tabpanel",id:"slick-slide"+t.instanceUid+n,tabindex:-1}),-1!==o){var r="slick-slide-control"+t.instanceUid+o;e("#"+r).length&&e(this).attr({"aria-describedby":r})}})),t.$dots.attr("role","tablist").find("li").each((function(o){var r=i[o];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+t.instanceUid+o,"aria-controls":"slick-slide"+t.instanceUid+r,"aria-label":o+1+" of "+n,"aria-selected":null,tabindex:"-1"})})).eq(t.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var o=t.currentSlide,r=o+t.options.slidesToShow;o<r;o++)t.options.focusOnChange?t.$slides.eq(o).attr({tabindex:"0"}):t.$slides.eq(o).removeAttr("tabindex");t.activateADA()},n.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},n.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(e("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&e("li",t.$dots).on("mouseenter.slick",e.proxy(t.interrupt,t,!0)).on("mouseleave.slick",e.proxy(t.interrupt,t,!1))},n.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",e.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",e.proxy(t.interrupt,t,!1)))},n.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),e(document).on(t.visibilityChange,e.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),e(window).on("orientationchange.slick.slick-"+t.instanceUid,e.proxy(t.orientationChange,t)),e(window).on("resize.slick.slick-"+t.instanceUid,e.proxy(t.resize,t)),e("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),e(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),e(t.setPosition)},n.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},n.prototype.keyHandler=function(e){var t=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===t.options.accessibility?t.changeSlide({data:{message:!0===t.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===t.options.accessibility&&t.changeSlide({data:{message:!0===t.options.rtl?"previous":"next"}}))},n.prototype.lazyLoad=function(){var t,n,i,o=this;function r(t){e("img[data-lazy]",t).each((function(){var t=e(this),n=e(this).attr("data-lazy"),i=e(this).attr("data-srcset"),r=e(this).attr("data-sizes")||o.$slider.attr("data-sizes"),s=document.createElement("img");s.onload=function(){t.animate({opacity:0},100,(function(){i&&(t.attr("srcset",i),r&&t.attr("sizes",r)),t.attr("src",n).animate({opacity:1},200,(function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")})),o.$slider.trigger("lazyLoaded",[o,t,n])}))},s.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),o.$slider.trigger("lazyLoadError",[o,t,n])},s.src=n}))}if(!0===o.options.centerMode?!0===o.options.infinite?i=(n=o.currentSlide+(o.options.slidesToShow/2+1))+o.options.slidesToShow+2:(n=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),i=o.options.slidesToShow/2+1+2+o.currentSlide):(n=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,i=Math.ceil(n+o.options.slidesToShow),!0===o.options.fade&&(n>0&&n--,i<=o.slideCount&&i++)),t=o.$slider.find(".slick-slide").slice(n,i),"anticipated"===o.options.lazyLoad)for(var s=n-1,a=i,l=o.$slider.find(".slick-slide"),c=0;c<o.options.slidesToScroll;c++)s<0&&(s=o.slideCount-1),t=(t=t.add(l.eq(s))).add(l.eq(a)),s--,a++;r(t),o.slideCount<=o.options.slidesToShow?r(o.$slider.find(".slick-slide")):o.currentSlide>=o.slideCount-o.options.slidesToShow?r(o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow)):0===o.currentSlide&&r(o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow))},n.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},n.prototype.next=n.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},n.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},n.prototype.pause=n.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},n.prototype.play=n.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},n.prototype.postSlide=function(t){var n=this;n.unslicked||(n.$slider.trigger("afterChange",[n,t]),n.animating=!1,n.slideCount>n.options.slidesToShow&&n.setPosition(),n.swipeLeft=null,n.options.autoplay&&n.autoPlay(),!0===n.options.accessibility&&(n.initADA(),n.options.focusOnChange&&e(n.$slides.get(n.currentSlide)).attr("tabindex",0).focus()))},n.prototype.prev=n.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},n.prototype.preventDefault=function(e){e.preventDefault()},n.prototype.progressiveLazyLoad=function(t){t=t||1;var n,i,o,r,s,a=this,l=e("img[data-lazy]",a.$slider);l.length?(n=l.first(),i=n.attr("data-lazy"),o=n.attr("data-srcset"),r=n.attr("data-sizes")||a.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){o&&(n.attr("srcset",o),r&&n.attr("sizes",r)),n.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===a.options.adaptiveHeight&&a.setPosition(),a.$slider.trigger("lazyLoaded",[a,n,i]),a.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout((function(){a.progressiveLazyLoad(t+1)}),500):(n.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,n,i]),a.progressiveLazyLoad())},s.src=i):a.$slider.trigger("allImagesLoaded",[a])},n.prototype.refresh=function(t){var n,i,o=this;i=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>i&&(o.currentSlide=i),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),n=o.currentSlide,o.destroy(!0),e.extend(o,o.initials,{currentSlide:n}),o.init(),t||o.changeSlide({data:{message:"index",index:n}},!1)},n.prototype.registerBreakpoints=function(){var t,n,i,o=this,r=o.options.responsive||null;if("array"===e.type(r)&&r.length){for(t in o.respondTo=o.options.respondTo||"window",r)if(i=o.breakpoints.length-1,r.hasOwnProperty(t)){for(n=r[t].breakpoint;i>=0;)o.breakpoints[i]&&o.breakpoints[i]===n&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(n),o.breakpointSettings[n]=r[t].settings}o.breakpoints.sort((function(e,t){return o.options.mobileFirst?e-t:t-e}))}},n.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&e(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},n.prototype.resize=function(){var t=this;e(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout((function(){t.windowWidth=e(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()}),50))},n.prototype.removeSlide=n.prototype.slickRemove=function(e,t,n){var i=this;if(e="boolean"==typeof e?!0===(t=e)?0:i.slideCount-1:!0===t?--e:e,i.slideCount<1||e<0||e>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(e).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},n.prototype.setCSS=function(e){var t,n,i=this,o={};!0===i.options.rtl&&(e=-e),t="left"==i.positionProp?Math.ceil(e)+"px":"0px",n="top"==i.positionProp?Math.ceil(e)+"px":"0px",o[i.positionProp]=e,!1===i.transformsEnabled?i.$slideTrack.css(o):(o={},!1===i.cssTransitions?(o[i.animType]="translate("+t+", "+n+")",i.$slideTrack.css(o)):(o[i.animType]="translate3d("+t+", "+n+", 0px)",i.$slideTrack.css(o)))},n.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var t=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-t)},n.prototype.setFade=function(){var t,n=this;n.$slides.each((function(i,o){t=n.slideWidth*i*-1,!0===n.options.rtl?e(o).css({position:"relative",right:t,top:0,zIndex:n.options.zIndex-2,opacity:0}):e(o).css({position:"relative",left:t,top:0,zIndex:n.options.zIndex-2,opacity:0})})),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},n.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var t=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",t)}},n.prototype.setOption=n.prototype.slickSetOption=function(){var t,n,i,o,r,s=this,a=!1;if("object"===e.type(arguments[0])?(i=arguments[0],a=arguments[1],r="multiple"):"string"===e.type(arguments[0])&&(i=arguments[0],o=arguments[1],a=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?r="responsive":void 0!==arguments[1]&&(r="single")),"single"===r)s.options[i]=o;else if("multiple"===r)e.each(i,(function(e,t){s.options[e]=t}));else if("responsive"===r)for(n in o)if("array"!==e.type(s.options.responsive))s.options.responsive=[o[n]];else{for(t=s.options.responsive.length-1;t>=0;)s.options.responsive[t].breakpoint===o[n].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(o[n])}a&&(s.unload(),s.reinit())},n.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},n.prototype.setProps=function(){var e=this,t=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===t.WebkitTransition&&void 0===t.MozTransition&&void 0===t.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==t.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===t.perspectiveProperty&&void 0===t.MozPerspective&&(e.animType=!1)),void 0!==t.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===t.perspectiveProperty&&void 0===t.webkitPerspective&&(e.animType=!1)),void 0!==t.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===t.msTransform&&(e.animType=!1)),void 0!==t.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},n.prototype.setSlideClasses=function(e){var t,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(e).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;t=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(e>=t&&e<=r.slideCount-1-t?r.$slides.slice(e-t+s,e+t+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+e,n.slice(i-t+1+s,i+t+2).addClass("slick-active").attr("aria-hidden","false")),0===e?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):e===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=r.slideCount-r.options.slidesToShow?r.$slides.slice(e,e+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+e:e,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-e<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},n.prototype.setupInfinite=function(){var t,n,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(n=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;t-=1)n=t-1,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i+o.slideCount;t+=1)n=t,e(o.$slides[n]).clone(!0).attr("id","").attr("data-slick-index",n+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each((function(){e(this).attr("id","")}))}},n.prototype.interrupt=function(e){e||this.autoPlay(),this.interrupted=e},n.prototype.selectHandler=function(t){var n=this,i=e(t.target).is(".slick-slide")?e(t.target):e(t.target).parents(".slick-slide"),o=parseInt(i.attr("data-slick-index"));o||(o=0),n.slideCount<=n.options.slidesToShow?n.slideHandler(o,!1,!0):n.slideHandler(o)},n.prototype.slideHandler=function(e,t,n){var i,o,r,s,a,l=null,c=this;if(t=t||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===e))if(!1===t&&c.asNavFor(e),i=e,l=c.getLeft(i),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(e<0||e>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,(function(){c.postSlide(i)})):c.postSlide(i));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(e<0||e>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,(function(){c.postSlide(i)})):c.postSlide(i));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(a=(a=c.getNavTarget()).slick("getSlick")).slideCount<=a.options.slidesToShow&&a.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,(function(){c.postSlide(o)}))):c.postSlide(o),void c.animateHeight();!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(l,(function(){c.postSlide(o)})):c.postSlide(o)}},n.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},n.prototype.swipeDirection=function(){var e,t,n,i,o=this;return e=o.touchObject.startX-o.touchObject.curX,t=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(t,e),(i=Math.round(180*n/Math.PI))<0&&(i=360-Math.abs(i)),i<=45&&i>=0||i<=360&&i>=315?!1===o.options.rtl?"left":"right":i>=135&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?i>=35&&i<=135?"down":"up":"vertical"},n.prototype.swipeEnd=function(e){var t,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1,!1;if(i.interrupted=!1,i.shouldClick=!(i.touchObject.swipeLength>10),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":t=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(t),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},n.prototype.swipeHandler=function(e){var t=this;if(!(!1===t.options.swipe||"ontouchend"in document&&!1===t.options.swipe||!1===t.options.draggable&&-1!==e.type.indexOf("mouse")))switch(t.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,t.touchObject.minSwipe=t.listWidth/t.options.touchThreshold,!0===t.options.verticalSwiping&&(t.touchObject.minSwipe=t.listHeight/t.options.touchThreshold),e.data.action){case"start":t.swipeStart(e);break;case"move":t.swipeMove(e);break;case"end":t.swipeEnd(e)}},n.prototype.swipeMove=function(e){var t,n,i,o,r,s,a=this;return r=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(t=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:e.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:e.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&s>4?(a.scrolling=!0,!1):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),n=a.swipeDirection(),void 0!==e.originalEvent&&a.touchObject.swipeLength>4&&(a.swiping=!0,e.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),i=a.touchObject.swipeLength,a.touchObject.edgeHit=!1,!1===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(i=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=t+i*o:a.swipeLeft=t+i*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=t+i*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},n.prototype.swipeStart=function(e){var t,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return n.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(t=e.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==t?t.pageX:e.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==t?t.pageY:e.clientY,n.dragging=!0},n.prototype.unfilterSlides=n.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},n.prototype.unload=function(){var t=this;e(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},n.prototype.unslick=function(e){var t=this;t.$slider.trigger("unslick",[t,e]),t.destroy()},n.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode||e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode)&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},n.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},n.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,t,i=this,o=arguments[0],r=Array.prototype.slice.call(arguments,1),s=i.length;for(e=0;e<s;e++)if("object"==typeof o||void 0===o?i[e].slick=new n(i[e],o):t=i[e].slick[o].apply(i[e].slick,r),void 0!==t)return t;return i}},void 0===(r=i.apply(t,o))||(e.exports=r)}()},974:(e,t,n)=>{"use strict";e.exports=n.p+"assets/eco-logo..png"},217:(e,t,n)=>{"use strict";e.exports=n.p+"assets/mail..png"},438:(e,t,n)=>{"use strict";e.exports=n.p+"assets/logo..svg"},325:(e,t,n)=>{"use strict";e.exports=n.p+"assets/star..svg"},234:(e,t,n)=>{"use strict";e.exports=n.p+"assets/chris..png"},828:(e,t,n)=>{"use strict";e.exports=n.p+"assets/helen..png"},177:(e,t,n)=>{"use strict";e.exports=n.p+"assets/nathan..png"},105:(e,t,n)=>{"use strict";e.exports=n.p+"assets/twitter..svg"},22:(e,t,n)=>{"use strict";e.exports=n.p+"assets/obvi..png"},406:(e,t,n)=>{"use strict";e.exports=n.p+"assets/overlander..png"},888:(e,t,n)=>{"use strict";e.exports=n.p+"assets/paragon..png"},533:(e,t,n)=>{"use strict";e.exports=n.p+"assets/autopilot..png"},796:(e,t,n)=>{"use strict";e.exports=n.p+"assets/complimentary concierge service..png"},820:(e,t,n)=>{"use strict";e.exports=n.p+"assets/handwritten card..png"},744:(e,t,n)=>{"use strict";e.exports=n.p+"assets/predictable pricing..png"},110:(e,t,n)=>{"use strict";e.exports=n.p+"assets/real-time..png"},688:(e,t,n)=>{"use strict";e.exports=n.p+"assets/shopify..png"},952:(e,t,n)=>{"use strict";e.exports=n.p+"assets/statistic..png"},301:(e,t,n)=>{"use strict";e.exports=n.p+"assets/line..svg"},425:(e,t,n)=>{"use strict";e.exports=n.p+"assets/trend-1..png"},869:(e,t,n)=>{"use strict";e.exports=n.p+"assets/trend-2..png"},230:(e,t,n)=>{"use strict";e.exports=n.p+"assets/trend-3..png"},595:(e,t,n)=>{"use strict";e.exports=n.p+"assets/bear-brand-name..png"},544:(e,t,n)=>{"use strict";e.exports=n.p+"assets/beard-brand..png"},626:(e,t,n)=>{"use strict";e.exports=n.p+"assets/promix-name..png"},676:(e,t,n)=>{"use strict";e.exports=n.p+"assets/promix..png"},152:(e,t,n)=>{"use strict";e.exports=n.p+"assets/run-gum-name..png"},597:(e,t,n)=>{"use strict";e.exports=n.p+"assets/run-gum..png"},840:(e,t,n)=>{"use strict";e.exports=n.p+"assets/scotch-porter-name..png"},515:(e,t,n)=>{"use strict";e.exports=n.p+"assets/scotch-porter..png"},244:(e,t,n)=>{"use strict";e.exports=n.p+"assets/postcard..png"},513:(e,t,n)=>{"use strict";e.exports=n.p+"assets/star-white..svg"}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");if(i.length)for(var o=i.length-1;o>-1&&!e;)e=i[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{"use strict";var e=n(91),t=n.n(e),i=new URL(n(438),n.b),o=new URL(n(325),n.b),r=new URL(n(597),n.b),s=new URL(n(152),n.b),a=new URL(n(544),n.b),l=new URL(n(595),n.b),c=new URL(n(676),n.b),d=new URL(n(626),n.b),u=new URL(n(515),n.b),p=new URL(n(840),n.b),f=new URL(n(952),n.b),h=new URL(n(22),n.b),g=new URL(n(406),n.b),v=new URL(n(888),n.b),y=new URL(n(688),n.b),m=new URL(n(533),n.b),w=new URL(n(110),n.b),b=new URL(n(820),n.b),x=new URL(n(744),n.b),T=new URL(n(796),n.b),k=new URL(n(301),n.b),S=new URL(n(828),n.b),C=new URL(n(105),n.b),$=new URL(n(177),n.b),A=new URL(n(234),n.b),E=new URL(n(513),n.b),L=new URL(n(244),n.b),j=new URL(n(425),n.b),D=new URL(n(869),n.b),H=new URL(n(230),n.b),O=new URL(n(974),n.b),P=new URL(n(217),n.b);t()(i),t()(o),t()(r),t()(s),t()(a),t()(l),t()(c),t()(d),t()(u),t()(p),t()(f),t()(h),t()(g),t()(v),t()(y),t()(m),t()(w),t()(b),t()(x),t()(T),t()(k),t()(S),t()(C),t()($),t()(A),t()(E);t()(L),t()(j),t()(D),t()(H),t()(O),t()(P);var N=n(755),M=n.n(N),q=(n(154),document.querySelectorAll(".stepper__item"));q.forEach((function(e){e.addEventListener("click",(function(t){t.target.classList.contains("stepper__item--active")||(q.forEach((function(e){return e.classList.remove("stepper__item--active")})),e.classList.add("stepper__item--active"))}))})),M()(".slider").slick({slidesToShow:3,arrows:!0,infinite:!0,autoplay:!0})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBLElBQUUsV0FBV3M1QixNQUFNLENBQ2Z6RixhQUFjLEVBQ2QvQixRQUFRLEVBQ1JrQixVQUFVLEVBQ1ZkLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLy4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay8uL25vZGVfbW9kdWxlcy9zbGljay1jYXJvdXNlbC9zbGljay9zbGljay5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYnBhY2svd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VicGFjay93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VicGFjay93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dlYnBhY2svd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWJwYWNrL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYnBhY2svd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vd2VicGFjay8uL3NyYy9pbmRleC5odG1sIiwid2VicGFjazovL3dlYnBhY2svLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMubWF5YmVOZWVkUXVvdGVzICYmIC9bXFx0XFxuXFxmXFxyIFwiJz08PmBdLy50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybCwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjcuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMy0wOC0yOFQxMzozN1pcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgdHJhYy0xNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXIgdmVyc2lvbiA9IFwiMy43LjFcIixcblxuXHRyaHRtbFN1ZmZpeCA9IC9IVE1MJC9pLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXG5cdC8vIFJldHJpZXZlIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuXHR0ZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbm9kZSxcblx0XHRcdHJldCA9IFwiXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRcdHJldCArPSBqUXVlcnkudGV4dCggbm9kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH1cblx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnRFbGVtZW50LnRleHRDb250ZW50O1xuXHRcdH1cblx0XHRpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHRcdH1cblxuXHRcdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0aXNYTUxEb2M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZVxuXHRcdC8vIGRvY3VtZW50IGZyYWdtZW50cy5cblx0XHRyZXR1cm4gIXJodG1sU3VmZml4LnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHBvcCA9IGFyci5wb3A7XG5cblxudmFyIHNvcnQgPSBhcnIuc29ydDtcblxuXG52YXIgc3BsaWNlID0gYXJyLnNwbGljZTtcblxuXG52YXIgd2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIjtcblxuXG52YXIgcnRyaW1DU1MgPSBuZXcgUmVnRXhwKFxuXHRcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLFxuXHRcImdcIlxuKTtcblxuXG5cblxuLy8gTm90ZTogYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxualF1ZXJ5LmNvbnRhaW5zID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdHZhciBidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblxuXHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHQvLyBJRSBkb2Vzbid0IGhhdmUgYGNvbnRhaW5zYCBvbiBTVkcuXG5cdFx0YS5jb250YWlucyA/XG5cdFx0XHRhLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0KSApO1xufTtcblxuXG5cblxuLy8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cbi8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xudmFyIHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXHg4MC1cXHVGRkZGXFx3LV0vZztcblxuZnVuY3Rpb24gZmNzc2VzY2FwZSggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHR9XG5cblx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdH1cblxuXHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdHJldHVybiBcIlxcXFxcIiArIGNoO1xufVxuXG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuXG5cblxudmFyIHByZWZlcnJlZERvYyA9IGRvY3VtZW50LFxuXHRwdXNoTmF0aXZlID0gcHVzaDtcblxuKCBmdW5jdGlvbigpIHtcblxudmFyIGksXG5cdEV4cHIsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXHRwdXNoID0gcHVzaE5hdGl2ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdGRvY3VtZW50LFxuXHRkb2N1bWVudEVsZW1lbnQsXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdG1hdGNoZXMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0galF1ZXJ5LmV4cGFuZG8sXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8XCIgK1xuXHRcdFwibG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJsZWFkaW5nQ29tYmluYXRvciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0SUQ6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRDTEFTUzogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRUQUc6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRBVFRSOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRQU0VVRE86IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdENISUxEOiBuZXcgUmVnRXhwKFxuXHRcdFx0XCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdGJvb2w6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0bmVlZHNDb250ZXh0OiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0aWYgKCBub25IZXggKSB7XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0cmV0dXJuIG5vbkhleDtcblx0XHR9XG5cblx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdHJldHVybiBoaWdoIDwgMCA/XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXM7IHNlZSBgc2V0RG9jdW1lbnRgLlxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRS9FZGdlLlxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgbm9kZU5hbWUoIGVsZW0sIFwiZmllbGRzZXRcIiApO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7XG5cdFx0YXBwbHk6IGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9LFxuXHRcdGNhbGw6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApICk7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBmaW5kKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggIW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCBybGVhZGluZ0NvbWJpbmF0b3IudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW5cblx0XHRcdFx0XHQvLyBzdHJpY3QtY29tcGFyaW5nIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IGpRdWVyeS5lc2NhcGVTZWxlY3RvciggbmlkICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXNcblx0XHQvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2lzc3Vlcy8xNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBqUXVlcnkgc2VsZWN0b3IgbW9kdWxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuICggbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApIHx8IG5vZGVOYW1lKCBlbGVtLCBcImJ1dHRvblwiICkgKSAmJlxuXHRcdFx0ZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExK1xuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIGpRdWVyeSBzZWxlY3RvciBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW25vZGVdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbmZ1bmN0aW9uIHNldERvY3VtZW50KCBub2RlICkge1xuXHR2YXIgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhalF1ZXJ5LmlzWE1MRG9jKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUyA3IG9ubHksIElFIDkgLSAxMStcblx0Ly8gT2xkZXIgYnJvd3NlcnMgZGlkbid0IHN1cHBvcnQgdW5wcmVmaXhlZCBgbWF0Y2hlc2AuXG5cdG1hdGNoZXMgPSBkb2N1bWVudEVsZW1lbnQubWF0Y2hlcyB8fFxuXHRcdGRvY3VtZW50RWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2N1bWVudEVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnNcblx0Ly8gKHNlZSB0cmFjLTEzOTM2KS5cblx0Ly8gTGltaXQgdGhlIGZpeCB0byBJRSAmIEVkZ2UgTGVnYWN5OyBkZXNwaXRlIEVkZ2UgMTUrIGltcGxlbWVudGluZyBgbWF0Y2hlc2AsXG5cdC8vIGFsbCBJRSA5KyBhbmQgRWRnZSBMZWdhY3kgdmVyc2lvbnMgaW1wbGVtZW50IGBtc01hdGNoZXNTZWxlY3RvcmAgYXMgd2VsbC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3IgJiZcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0cHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGpRdWVyeS5leHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHxcblx0XHRcdCFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggalF1ZXJ5LmV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUuXG5cdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRyZXR1cm4gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gSUUvRWRnZSBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGVcIiApO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogQ2hyb21lIDEwNSAtIDExMSBvbmx5LCBTYWZhcmkgMTUuNCAtIDE2LjMgb25seVxuXHQvLyBNYWtlIHN1cmUgdGhlIGA6aGFzKClgIGFyZ3VtZW50IGlzIHBhcnNlZCB1bmZvcmdpdmluZ2x5LlxuXHQvLyBXZSBpbmNsdWRlIGAqYCBpbiB0aGUgdGVzdCB0byBkZXRlY3QgYnVnZ3kgaW1wbGVtZW50YXRpb25zIHRoYXQgYXJlXG5cdC8vIF9zZWxlY3RpdmVseV8gZm9yZ2l2aW5nIChzcGVjaWZpY2FsbHkgd2hlbiB0aGUgbGlzdCBpbmNsdWRlcyBhdCBsZWFzdFxuXHQvLyBvbmUgdmFsaWQgc2VsZWN0b3IpLlxuXHQvLyBOb3RlIHRoYXQgd2UgdHJlYXQgY29tcGxldGUgbGFjayBvZiBzdXBwb3J0IGZvciBgOmhhcygpYCBhcyBpZiBpdCB3ZXJlXG5cdC8vIHNwZWMtY29tcGxpYW50IHN1cHBvcnQsIHdoaWNoIGlzIGZpbmUgYmVjYXVzZSB1c2Ugb2YgYDpoYXMoKWAgaW4gc3VjaFxuXHQvLyBlbnZpcm9ubWVudHMgd2lsbCBmYWlsIGluIHRoZSBxU0EgcGF0aCBhbmQgZmFsbCBiYWNrIHRvIGpRdWVyeSB0cmF2ZXJzYWxcblx0Ly8gYW55d2F5LlxuXHRzdXBwb3J0LmNzc0hhcyA9IGFzc2VydCggZnVuY3Rpb24oKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIFwiOmhhcygqLDpqcWZha2UpXCIgKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlci5JRCA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kLklEID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlci5JRCA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmQuSUQgPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZC5UQUcgPSBmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZC5DTEFTUyA9IGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdHZhciBpbnB1dDtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPVxuXHRcdFx0XCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBkaXNhYmxlZD0nZGlzYWJsZWQnPlwiICtcblx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA8PTcgLSA4IG9ubHlcblx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5IGluIHNvbWUgWE1MIGRvY3VtZW50c1xuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgPD03IC0gOCBvbmx5XG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBpT1MgOCBvbmx5XG5cdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTEwNSssIEZpcmVmb3ggPD0xMDQrLCBTYWZhcmkgPD0xNS40K1xuXHRcdC8vIEluIHNvbWUgb2YgdGhlIGRvY3VtZW50IGtpbmRzLCB0aGVzZSBzZWxlY3RvcnMgd291bGRuJ3Qgd29yayBuYXRpdmVseS5cblx0XHQvLyBUaGlzIGlzIHByb2JhYmx5IE9LIGJ1dCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2Ugd2FudCB0byBtYWludGFpblxuXHRcdC8vIGhhbmRsaW5nIHRoZW0gdGhyb3VnaCBqUXVlcnkgdHJhdmVyc2FsIGluIGpRdWVyeSAzLnguXG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MTA1KywgRmlyZWZveCA8PTEwNCssIFNhZmFyaSA8PTE1LjQrXG5cdFx0Ly8gSW4gc29tZSBvZiB0aGUgZG9jdW1lbnQga2luZHMsIHRoZXNlIHNlbGVjdG9ycyB3b3VsZG4ndCB3b3JrIG5hdGl2ZWx5LlxuXHRcdC8vIFRoaXMgaXMgcHJvYmFibHkgT0sgYnV0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3ZSB3YW50IHRvIG1haW50YWluXG5cdFx0Ly8gaGFuZGxpbmcgdGhlbSB0aHJvdWdoIGpRdWVyeSB0cmF2ZXJzYWwgaW4galF1ZXJ5IDMueC5cblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdH1cblx0fSApO1xuXG5cdGlmICggIXN1cHBvcnQuY3NzSGFzICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDEwNSAtIDExMCssIFNhZmFyaSAxNS40IC0gMTYuMytcblx0XHQvLyBPdXIgcmVndWxhciBgdHJ5LWNhdGNoYCBtZWNoYW5pc20gZmFpbHMgdG8gZGV0ZWN0IG5hdGl2ZWx5LXVuc3VwcG9ydGVkXG5cdFx0Ly8gcHNldWRvLWNsYXNzZXMgaW5zaWRlIGA6aGFzKClgIChzdWNoIGFzIGA6aGFzKDpjb250YWlucyhcIkZvb1wiKSlgKVxuXHRcdC8vIGluIGJyb3dzZXJzIHRoYXQgcGFyc2UgdGhlIGA6aGFzKClgIGFyZ3VtZW50IGFzIGEgZm9yZ2l2aW5nIHNlbGVjdG9yIGxpc3QuXG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy8jcmVsYXRpb25hbCBub3cgcmVxdWlyZXMgdGhlIGFyZ3VtZW50XG5cdFx0Ly8gdG8gYmUgcGFyc2VkIHVuZm9yZ2l2aW5nbHksIGJ1dCBicm93c2VycyBoYXZlIG5vdCB5ZXQgZnVsbHkgYWRqdXN0ZWQuXG5cdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmhhc1wiICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRmaW5kLmNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGZpbmQuY29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBhICkgLSBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59XG5cbmZpbmQubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIGZpbmQoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5maW5kLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZpbmQoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5maW5kLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuXG5maW5kLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIHRyYWMtMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRpZiAoIHZhbCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcbn07XG5cbmZpbmQuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0Ly9cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCtcblx0Ly8gVGVzdGluZyBmb3IgZGV0ZWN0aW5nIGR1cGxpY2F0ZXMgaXMgdW5wcmVkaWN0YWJsZSBzbyBpbnN0ZWFkIGFzc3VtZSB3ZSBjYW4ndFxuXHQvLyBkZXBlbmQgb24gZHVwbGljYXRlIGRldGVjdGlvbiBpbiBhbGwgYnJvd3NlcnMgd2l0aG91dCBhIHN0YWJsZSBzb3J0LlxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5zb3J0U3RhYmxlO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHNsaWNlLmNhbGwoIHJlc3VsdHMsIDAgKTtcblx0c29ydC5jYWxsKCByZXN1bHRzLCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHNwbGljZS5jYWxsKCByZXN1bHRzLCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbmpRdWVyeS5mbi51bmlxdWVTb3J0ID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LnVuaXF1ZVNvcnQoIHNsaWNlLmFwcGx5KCB0aGlzICkgKSApO1xufTtcblxuRXhwciA9IGpRdWVyeS5leHByID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdEFUVFI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiIClcblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRDSElMRDogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRmaW5kLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRmaW5kLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0UFNFVURPOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByLkNISUxELnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRUQUc6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIGV4cGVjdGVkTm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBleHBlY3RlZE5vZGVOYW1lICk7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdENMQVNTOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICtcblx0XHRcdFx0XHRcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdEFUVFI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBmaW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCI9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCA9PT0gY2hlY2s7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCIhPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQgIT09IGNoZWNrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiXj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCIqPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwiJD1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggb3BlcmF0b3IgPT09IFwifj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiIClcblx0XHRcdFx0XHRcdC5pbmRleE9mKCBjaGVjayApID4gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCJ8PVwiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0Q0hJTEQ6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlTmFtZSggbm9kZSwgbmFtZSApIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKCBwYXJlbnRbIGV4cGFuZG8gXSA9IHt9ICk7XG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gb3V0ZXJDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXRlckNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGVOYW1lKCBub2RlLCBuYW1lICkgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0UFNFVURPOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0ZmluZC5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIGpRdWVyeSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZi5jYWxsKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdG5vdDogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRoYXM6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZmluZCggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRjb250YWluczogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgalF1ZXJ5LnRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRsYW5nOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0ZmluZC5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHR0YXJnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdHJvb3Q6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50RWxlbWVudDtcblx0XHR9LFxuXG5cdFx0Zm9jdXM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiZcblx0XHRcdFx0ZG9jdW1lbnQuaGFzRm9jdXMoKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRlbmFibGVkOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRkaXNhYmxlZDogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdGNoZWNrZWQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSggZWxlbSwgXCJvcHRpb25cIiApICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRzZWxlY3RlZDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcblx0XHRcdC8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byB0cmVhdCB0aGUgZGVmYXVsdCBvcHRpb24gYXNcblx0XHRcdC8vIHNlbGVjdGVkIHdoZW4gaW4gYW4gb3B0Z3JvdXAuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0ZW1wdHk6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3MuZW1wdHkoIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdGhlYWRlcjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdGlucHV0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0YnV0dG9uOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8XG5cdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImJ1dHRvblwiICk7XG5cdFx0fSxcblxuXHRcdHRleHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8MTAgb25seVxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyXG5cdFx0XHRcdC8vIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdGZpcnN0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRsYXN0OiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdGVxOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRldmVuOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0b2RkOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0bHQ6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaTtcblxuXHRcdFx0aWYgKCBhcmd1bWVudCA8IDAgKSB7XG5cdFx0XHRcdGkgPSBhcmd1bWVudCArIGxlbmd0aDtcblx0XHRcdH0gZWxzZSBpZiAoIGFyZ3VtZW50ID4gbGVuZ3RoICkge1xuXHRcdFx0XHRpID0gbGVuZ3RoO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aSA9IGFyZ3VtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0Z3Q6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3MubnRoID0gRXhwci5wc2V1ZG9zLmVxO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbmZ1bmN0aW9uIHRva2VuaXplKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSBybGVhZGluZ0NvbWJpbmF0b3IuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbUNTUywgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRpZiAoIHBhcnNlT25seSApIHtcblx0XHRyZXR1cm4gc29GYXIubGVuZ3RoO1xuXHR9XG5cblx0cmV0dXJuIHNvRmFyID9cblx0XHRmaW5kLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn1cblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgbm9kZU5hbWUoIGVsZW0sIHNraXAgKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gb3V0ZXJDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRmaW5kKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLCBtYXRjaGVyT3V0LFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8XG5cdFx0XHRcdG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXM7XG5cblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cblx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyXG5cdFx0XHQvLyBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0bWF0Y2hlck91dCA9IHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRyZXN1bHRzO1xuXG5cdFx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXJJbjtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YuY2FsbCggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50XG5cdFx0XHQvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2lzc3Vlcy8yOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kLlRBRyggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBpT1MgPD03IC0gOSBvbmx5XG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmdcblx0XHRcdC8vIGVsZW1lbnRzIGJ5IGlkLiAoc2VlIHRyYWMtMTQxNDIpXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cHVzaC5jYWxsKCByZXN1bHRzLCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5mdW5jdGlvbiBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApICk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufVxuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggalF1ZXJ5J3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBqUXVlcnkgc2VsZWN0b3IgY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbmZ1bmN0aW9uIHNlbGVjdCggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmQuSUQoXG5cdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRjb250ZXh0XG5cdFx0XHQpIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHIubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmXG5cdFx0XHRcdFx0XHR0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIC0gNC4xK1xuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCAtIDQuMStcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxualF1ZXJ5LmZpbmQgPSBmaW5kO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlID0galF1ZXJ5LnVuaXF1ZVNvcnQ7XG5cbi8vIFRoZXNlIGhhdmUgYWx3YXlzIGJlZW4gcHJpdmF0ZSwgYnV0IHRoZXkgdXNlZCB0byBiZSBkb2N1bWVudGVkIGFzIHBhcnQgb2Zcbi8vIFNpenpsZSBzbyBsZXQncyBtYWludGFpbiB0aGVtIGZvciBub3cgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHB1cnBvc2VzLlxuZmluZC5jb21waWxlID0gY29tcGlsZTtcbmZpbmQuc2VsZWN0ID0gc2VsZWN0O1xuZmluZC5zZXREb2N1bWVudCA9IHNldERvY3VtZW50O1xuZmluZC50b2tlbml6ZSA9IHRva2VuaXplO1xuXG5maW5kLmVzY2FwZSA9IGpRdWVyeS5lc2NhcGVTZWxlY3RvcjtcbmZpbmQuZ2V0VGV4dCA9IGpRdWVyeS50ZXh0O1xuZmluZC5pc1hNTCA9IGpRdWVyeS5pc1hNTERvYztcbmZpbmQuc2VsZWN0b3JzID0galF1ZXJ5LmV4cHI7XG5maW5kLnN1cHBvcnQgPSBqUXVlcnkuc3VwcG9ydDtcbmZpbmQudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWVTb3J0O1xuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxufSApKCk7XG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKHRyYWMtOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKHRyYWMtMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIGpRdWVyeSNmaW5kXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MuZXJyb3IgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgZXJyb3IsIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0RXJyb3JIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5lcnJvciA9IGpRdWVyeS5EZWZlcnJlZC5nZXRFcnJvckhvb2soKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFRoZSBkZXByZWNhdGVkIGFsaWFzIG9mIHRoZSBhYm92ZS4gV2hpbGUgdGhlIG5hbWUgc3VnZ2VzdHNcblx0XHRcdFx0XHRcdFx0XHQvLyByZXR1cm5pbmcgdGhlIHN0YWNrLCBub3QgYW4gZXJyb3IgaW5zdGFuY2UsIGpRdWVyeSBqdXN0IHBhc3Nlc1xuXHRcdFx0XHRcdFx0XHRcdC8vIGl0IGRpcmVjdGx5IHRvIGBjb25zb2xlLndhcm5gIHNvIGJvdGggd2lsbCB3b3JrOyBhbiBpbnN0YW5jZVxuXHRcdFx0XHRcdFx0XHRcdC8vIGp1c3QgYmV0dGVyIGNvb3BlcmF0ZXMgd2l0aCBzb3VyY2UgbWFwcy5cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5lcnJvciA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBwcmltYXJ5IERlZmVycmVkXG5cdFx0XHRwcmltYXJ5ID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdHByaW1hcnkucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIHByaW1hcnkuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgcHJpbWFyeS5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBwcmltYXJ5LnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBwcmltYXJ5LnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIHByaW1hcnkucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByaW1hcnkucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG4vLyBJZiBgalF1ZXJ5LkRlZmVycmVkLmdldEVycm9ySG9va2AgaXMgZGVmaW5lZCwgYGFzeW5jRXJyb3JgIGlzIGFuIGVycm9yXG4vLyBjYXB0dXJlZCBiZWZvcmUgdGhlIGFzeW5jIGJhcnJpZXIgdG8gZ2V0IHRoZSBvcmlnaW5hbCBlcnJvciBjYXVzZVxuLy8gd2hpY2ggbWF5IG90aGVyd2lzZSBiZSBoaWRkZW4uXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgYXN5bmNFcnJvciApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsXG5cdFx0XHRlcnJvci5zdGFjaywgYXN5bmNFcnJvciApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgdHJhYy02NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKHRyYWMtOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlIHRyYWMtODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKHRyYWMtMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKHRyYWMtMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICh0cmFjLTE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICh0cmFjLTEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAodHJhYy0xNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKHRyYWMtMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICh0cmFjLTEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAodHJhYy02OTExLCB0cmFjLTgxNjUsIHRyYWMtMTEzODIsIHRyYWMtMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAodHJhYy0xMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBpc1NldHVwICkge1xuXG5cdC8vIE1pc3NpbmcgYGlzU2V0dXBgIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhaXNTZXR1cCApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0aWYgKCAhc2F2ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmdcblx0XHRcdFx0Ly8gdGhlIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cdFx0XHRcdFx0c2F2ZWRbIDAgXSxcblx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnQgYnkgYWxsIGpRdWVyeSBoYW5kbGVycyB3aGlsZSBhbGxvd2luZ1xuXHRcdFx0XHQvLyBuYXRpdmUgaGFuZGxlcnMgb24gdGhlIHNhbWUgZWxlbWVudCB0byBydW4uIE9uIHRhcmdldCwgdGhpcyBpcyBhY2hpZXZlZFxuXHRcdFx0XHQvLyBieSBzdG9wcGluZyBpbW1lZGlhdGUgcHJvcGFnYXRpb24ganVzdCBvbiB0aGUgalF1ZXJ5IGV2ZW50LiBIb3dldmVyLFxuXHRcdFx0XHQvLyB0aGUgbmF0aXZlIGV2ZW50IGlzIHJlLXdyYXBwZWQgYnkgYSBqUXVlcnkgb25lIG9uIGVhY2ggbGV2ZWwgb2YgdGhlXG5cdFx0XHRcdC8vIHByb3BhZ2F0aW9uIHNvIHRoZSBvbmx5IHdheSB0byBzdG9wIGl0IGZvciBqUXVlcnkgaXMgdG8gc3RvcCBpdCBmb3Jcblx0XHRcdFx0Ly8gZXZlcnlvbmUgdmlhIG5hdGl2ZSBgc3RvcFByb3BhZ2F0aW9uKClgLiBUaGlzIGlzIG5vdCBhIHByb2JsZW0gZm9yXG5cdFx0XHRcdC8vIGZvY3VzL2JsdXIgd2hpY2ggZG9uJ3QgYnViYmxlLCBidXQgaXQgZG9lcyBhbHNvIHN0b3AgY2xpY2sgb24gY2hlY2tib3hlc1xuXHRcdFx0XHQvLyBhbmQgcmFkaW9zLiBXZSBhY2NlcHQgdGhpcyBsaW1pdGF0aW9uLlxuXHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0ZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKHRyYWMtNTA0LCB0cmFjLTEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cdHdoaWNoOiB0cnVlXG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXG5cdGZ1bmN0aW9uIGZvY3VzTWFwcGVkSGFuZGxlciggbmF0aXZlRXZlbnQgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGZvY3VzaW4vZm9jdXNvdXQgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50c1xuXHRcdFx0Ly8gZm9jdXMvYmx1ci4gVGhpcyBpcyBiZWNhdXNlIHRoZSBmb3JtZXIgYXJlIHN5bmNocm9ub3VzIGluIElFIHdoaWxlIHRoZSBsYXR0ZXJcblx0XHRcdC8vIGFyZSBhc3luYy4gSW4gb3RoZXIgYnJvd3NlcnMsIGFsbCB0aG9zZSBoYW5kbGVycyBhcmUgaW52b2tlZCBzeW5jaHJvbm91c2x5LlxuXG5cdFx0XHQvLyBgaGFuZGxlYCBmcm9tIHByaXZhdGUgZGF0YSB3b3VsZCBhbHJlYWR5IHdyYXAgdGhlIGV2ZW50LCBidXQgd2UgbmVlZFxuXHRcdFx0Ly8gdG8gY2hhbmdlIHRoZSBgdHlwZWAgaGVyZS5cblx0XHRcdHZhciBoYW5kbGUgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiaGFuZGxlXCIgKSxcblx0XHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXHRcdFx0ZXZlbnQudHlwZSA9IG5hdGl2ZUV2ZW50LnR5cGUgPT09IFwiZm9jdXNpblwiID8gXCJmb2N1c1wiIDogXCJibHVyXCI7XG5cdFx0XHRldmVudC5pc1NpbXVsYXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIEZpcnN0LCBoYW5kbGUgZm9jdXNpbi9mb2N1c291dFxuXHRcdFx0aGFuZGxlKCBuYXRpdmVFdmVudCApO1xuXG5cdFx0XHQvLyAuLi50aGVuLCBoYW5kbGUgZm9jdXMvYmx1clxuXHRcdFx0Ly9cblx0XHRcdC8vIGZvY3VzL2JsdXIgZG9uJ3QgYnViYmxlIHdoaWxlIGZvY3VzaW4vZm9jdXNvdXQgZG87IHNpbXVsYXRlIHRoZSBmb3JtZXIgYnkgb25seVxuXHRcdFx0Ly8gaW52b2tpbmcgdGhlIGhhbmRsZXIgYXQgdGhlIGxvd2VyIGxldmVsLlxuXHRcdFx0aWYgKCBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgKSB7XG5cblx0XHRcdFx0Ly8gVGhlIHNldHVwIHBhcnQgY2FsbHMgYGxldmVyYWdlTmF0aXZlYCwgd2hpY2gsIGluIHR1cm4sIGNhbGxzXG5cdFx0XHRcdC8vIGBqUXVlcnkuZXZlbnQuYWRkYCwgc28gZXZlbnQgaGFuZGxlIHdpbGwgYWxyZWFkeSBoYXZlIGJlZW4gc2V0XG5cdFx0XHRcdC8vIGJ5IHRoaXMgcG9pbnQuXG5cdFx0XHRcdGhhbmRsZSggZXZlbnQgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3Igbm9uLUlFIGJyb3dzZXJzLCBhdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50XG5cdFx0XHQvLyB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXQuXG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGRlbGVnYXRlVHlwZSwgbmF0aXZlRXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApICk7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIGF0dGFjaGVzO1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIHRydWUgKTtcblxuXHRcdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdFx0XHQvLyBXZSB1c2UgdGhlIHNhbWUgbmF0aXZlIGhhbmRsZXIgZm9yIGZvY3VzaW4gJiBmb2N1cyAoYW5kIGZvY3Vzb3V0ICYgYmx1cilcblx0XHRcdFx0Ly8gc28gd2UgbmVlZCB0byBjb29yZGluYXRlIHNldHVwICYgdGVhcmRvd24gcGFydHMgYmV0d2VlbiB0aG9zZSBldmVudHMuXG5cdFx0XHRcdC8vIFVzZSBgZGVsZWdhdGVUeXBlYCBhcyB0aGUga2V5IGFzIGB0eXBlYCBpcyBhbHJlYWR5IHVzZWQgYnkgYGxldmVyYWdlTmF0aXZlYC5cblx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSApO1xuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIGRlbGVnYXRlVHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgYXR0YWNoZXM7XG5cblx0XHRcdGlmICggZG9jdW1lbnQuZG9jdW1lbnRNb2RlICkge1xuXHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmdldCggdGhpcywgZGVsZWdhdGVUeXBlICkgLSAxO1xuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHR0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoIGRlbGVnYXRlVHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCB0aGlzLCBkZWxlZ2F0ZVR5cGUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gaW5kaWNhdGUgc3RhbmRhcmQgdGVhcmRvd24gc2hvdWxkIGJlIGFwcGxpZWRcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBTdXBwcmVzcyBuYXRpdmUgZm9jdXMgb3IgYmx1ciBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlXG5cdFx0Ly8gYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGV2ZW50LnRhcmdldCwgdHlwZSApO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuXHQvLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG5cdC8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG5cdC8vXG5cdC8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuXHQvLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcblx0Ly8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG5cdC8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5cdC8vXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0Ly8gVG8gcHJlc2VydmUgcmVsYXRpdmUgZm9jdXNpbi9mb2N1cyAmIGZvY3Vzb3V0L2JsdXIgZXZlbnQgb3JkZXIgZ3VhcmFudGVlZCBvbiB0aGUgMy54IGJyYW5jaCxcblx0Ly8gYXR0YWNoIGEgc2luZ2xlIGhhbmRsZXIgZm9yIGJvdGggZXZlbnRzIGluIElFLlxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZGVsZWdhdGVUeXBlIF0gPSB7XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdGRhdGFIb2xkZXIgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgPyB0aGlzIDogZG9jLFxuXHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmdldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHRcdC8vIFdlIHVzZSB0aGUgc2FtZSBuYXRpdmUgaGFuZGxlciBmb3IgZm9jdXNpbiAmIGZvY3VzIChhbmQgZm9jdXNvdXQgJiBibHVyKVxuXHRcdFx0Ly8gc28gd2UgbmVlZCB0byBjb29yZGluYXRlIHNldHVwICYgdGVhcmRvd24gcGFydHMgYmV0d2VlbiB0aG9zZSBldmVudHMuXG5cdFx0XHQvLyBVc2UgYGRlbGVnYXRlVHlwZWAgYXMgdGhlIGtleSBhcyBgdHlwZWAgaXMgYWxyZWFkeSB1c2VkIGJ5IGBsZXZlcmFnZU5hdGl2ZWAuXG5cdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBmb2N1c01hcHBlZEhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZGF0YVByaXYuc2V0KCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdH0sXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdGRhdGFIb2xkZXIgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgPyB0aGlzIDogZG9jLFxuXHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmdldCggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlICkgLSAxO1xuXG5cdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCBkZWxlZ2F0ZVR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBmb2N1c01hcHBlZEhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUsIGF0dGFjaGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8IVxcW0NEQVRBXFxbfFxcXVxcXT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAodHJhYy04MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZS1lbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVW53cmFwIGEgQ0RBVEEgc2VjdGlvbiBjb250YWluaW5nIHNjcmlwdCBjb250ZW50cy4gVGhpcyBzaG91bGRuJ3QgYmVcblx0XHRcdFx0XHRcdFx0Ly8gbmVlZGVkIGFzIGluIFhNTCBkb2N1bWVudHMgdGhleSdyZSBhbHJlYWR5IG5vdCB2aXNpYmxlIHdoZW5cblx0XHRcdFx0XHRcdFx0Ly8gaW5zcGVjdGluZyBlbGVtZW50IGNvbnRlbnRzIGFuZCBpbiBIVE1MIGRvY3VtZW50cyB0aGV5IGhhdmUgbm9cblx0XHRcdFx0XHRcdFx0Ly8gbWVhbmluZyBidXQgd2UncmUgcHJlc2VydmluZyB0aGF0IGxvZ2ljIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIGJlIHJlbW92ZWQgY29tcGxldGVseSBpbiA0LjAuIFNlZSBnaC00OTA0LlxuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IGpRdWVyeSNmaW5kIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6XG5cdFx0XHQvLyBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciByY3VzdG9tUHJvcCA9IC9eLS0vO1xuXG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICh0cmFjLTE1MDk4LCB0cmFjLTE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAodHJhYy04OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm94LXNpemluZzpjb250ZW50LWJveDtib3JkZXI6MXB4IHNvbGlkXCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBIZWlnaHQgc2V0IHRocm91Z2ggY3NzVGV4dCBkb2VzIG5vdCBnZXQgYXBwbGllZC5cblx0XHRcdFx0Ly8gQ29tcHV0ZWQgaGVpZ2h0IHRoZW4gY29tZXMgYmFjayBhcyAwLlxuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA4IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSW4gb3VyIGJvZHlCYWNrZ3JvdW5kLmh0bWwgaWZyYW1lLFxuXHRcdFx0XHQvLyBkaXNwbGF5IGZvciBhbGwgZGl2IGVsZW1lbnRzIGlzIHNldCB0byBcImlubGluZVwiLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYSBwcm9ibGVtIG9ubHkgaW4gQW5kcm9pZCA4IENocm9tZSA4Ni5cblx0XHRcdFx0Ly8gRW5zdXJpbmcgdGhlIGRpdiBpcyBgZGlzcGxheTogYmxvY2tgXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgdHJhYy0xMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoZ2gtMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdC8vIElFIG9ubHkgc3VwcG9ydHMgYFwiZmxvYXRcImAgaW4gYGdldFByb3BlcnR5VmFsdWVgOyBpbiBjb21wdXRlZCBzdHlsZXNcblx0XHQvLyBpdCdzIG9ubHkgYXZhaWxhYmxlIGFzIGBcImNzc0Zsb2F0XCJgLiBXZSBubyBsb25nZXIgbW9kaWZ5IHByb3BlcnRpZXNcblx0XHQvLyBzZW50IHRvIGAuY3NzKClgIGFwYXJ0IGZyb20gY2FtZWxDYXNpbmcsIHNvIHdlIG5lZWQgdG8gY2hlY2sgYm90aC5cblx0XHQvLyBOb3JtYWxseSwgdGhpcyB3b3VsZCBjcmVhdGUgZGlmZmVyZW5jZSBpbiBiZWhhdmlvcjogaWZcblx0XHQvLyBgZ2V0UHJvcGVydHlWYWx1ZWAgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcsIHRoZSB2YWx1ZSByZXR1cm5lZFxuXHRcdC8vIGJ5IGAuY3NzKClgIHdvdWxkIGJlIGB1bmRlZmluZWRgLiBUaGlzIGlzIHVzdWFsbHkgdGhlIGNhc2UgZm9yXG5cdFx0Ly8gZGlzY29ubmVjdGVkIGVsZW1lbnRzLiBIb3dldmVyLCBpbiBJRSBldmVuIGRpc2Nvbm5lY3RlZCBlbGVtZW50c1xuXHRcdC8vIHdpdGggbm8gc3R5bGVzIHJldHVybiBgXCJub25lXCJgIGZvciBgZ2V0UHJvcGVydHlWYWx1ZSggXCJmbG9hdFwiIClgXG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIGlzQ3VzdG9tUHJvcCAmJiByZXQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMTA1KywgQ2hyb21lIDw9MTA1K1xuXHRcdFx0Ly8gU3BlYyByZXF1aXJlcyB0cmltbWluZyB3aGl0ZXNwYWNlIGZvciBjdXN0b20gcHJvcGVydGllcyAoZ2gtNDkyNikuXG5cdFx0XHQvLyBGaXJlZm94IG9ubHkgdHJpbXMgbGVhZGluZyB3aGl0ZXNwYWNlLiBDaHJvbWUganVzdCBjb2xsYXBzZXNcblx0XHRcdC8vIGJvdGggbGVhZGluZyAmIHRyYWlsaW5nIHdoaXRlc3BhY2UgdG8gYSBzaW5nbGUgc3BhY2UuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gRmFsbCBiYWNrIHRvIGB1bmRlZmluZWRgIGlmIGVtcHR5IHN0cmluZyByZXR1cm5lZC5cblx0XHRcdC8vIFRoaXMgY29sbGFwc2VzIGEgbWlzc2luZyBkZWZpbml0aW9uIHdpdGggcHJvcGVydHkgZGVmaW5lZFxuXHRcdFx0Ly8gYW5kIHNldCB0byBhbiBlbXB0eSBzdHJpbmcgYnV0IHRoZXJlJ3Mgbm8gc3RhbmRhcmQgQVBJXG5cdFx0XHQvLyBhbGxvd2luZyB1cyB0byBkaWZmZXJlbnRpYXRlIHRoZW0gd2l0aG91dCBhIHBlcmZvcm1hbmNlIHBlbmFsdHlcblx0XHRcdC8vIGFuZCByZXR1cm5pbmcgYHVuZGVmaW5lZGAgYWxpZ25zIHdpdGggb2xkZXIgalF1ZXJ5LlxuXHRcdFx0Ly9cblx0XHRcdC8vIHJ0cmltQ1NTIHRyZWF0cyBVKzAwMEQgQ0FSUklBR0UgUkVUVVJOIGFuZCBVKzAwMEMgRk9STSBGRUVEXG5cdFx0XHQvLyBhcyB3aGl0ZXNwYWNlIHdoaWxlIENTUyBkb2VzIG5vdCwgYnV0IHRoaXMgaXMgbm90IGEgcHJvYmxlbVxuXHRcdFx0Ly8gYmVjYXVzZSBDU1MgcHJlcHJvY2Vzc2luZyByZXBsYWNlcyB0aGVtIHdpdGggVSswMDBBIExJTkUgRkVFRFxuXHRcdFx0Ly8gKHdoaWNoICppcyogQ1NTIHdoaXRlc3BhY2UpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpbnB1dC1wcmVwcm9jZXNzaW5nXG5cdFx0XHRyZXQgPSByZXQucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApIHx8IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDAsXG5cdFx0bWFyZ2luRGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdC8vIENvdW50IG1hcmdpbiBkZWx0YSBzZXBhcmF0ZWx5IHRvIG9ubHkgYWRkIGl0IGFmdGVyIHNjcm9sbCBndXR0ZXIgYWRqdXN0bWVudC5cblx0XHQvLyBUaGlzIGlzIG5lZWRlZCB0byBtYWtlIG5lZ2F0aXZlIG1hcmdpbnMgd29yayB3aXRoIGBvdXRlckhlaWdodCggdHJ1ZSApYCAoZ2gtMzk4MikuXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRtYXJnaW5EZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGEgKyBtYXJnaW5EZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG5cdFx0YXNwZWN0UmF0aW86IHRydWUsXG5cdFx0Ym9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcblx0XHRjb2x1bW5Db3VudDogdHJ1ZSxcblx0XHRmbGV4R3JvdzogdHJ1ZSxcblx0XHRmbGV4U2hyaW5rOiB0cnVlLFxuXHRcdGZvbnRXZWlnaHQ6IHRydWUsXG5cdFx0Z3JpZEFyZWE6IHRydWUsXG5cdFx0Z3JpZENvbHVtbjogdHJ1ZSxcblx0XHRncmlkQ29sdW1uRW5kOiB0cnVlLFxuXHRcdGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcblx0XHRncmlkUm93OiB0cnVlLFxuXHRcdGdyaWRSb3dFbmQ6IHRydWUsXG5cdFx0Z3JpZFJvd1N0YXJ0OiB0cnVlLFxuXHRcdGxpbmVIZWlnaHQ6IHRydWUsXG5cdFx0b3BhY2l0eTogdHJ1ZSxcblx0XHRvcmRlcjogdHJ1ZSxcblx0XHRvcnBoYW5zOiB0cnVlLFxuXHRcdHNjYWxlOiB0cnVlLFxuXHRcdHdpZG93czogdHJ1ZSxcblx0XHR6SW5kZXg6IHRydWUsXG5cdFx0em9vbTogdHJ1ZSxcblxuXHRcdC8vIFNWRy1yZWxhdGVkXG5cdFx0ZmlsbE9wYWNpdHk6IHRydWUsXG5cdFx0Zmxvb2RPcGFjaXR5OiB0cnVlLFxuXHRcdHN0b3BPcGFjaXR5OiB0cnVlLFxuXHRcdHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG5cdFx0c3Ryb2tlT3BhY2l0eTogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAodHJhYy03MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgdHJhYy05MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKHRyYWMtNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICh0cmFjLTEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsICh0cmFjLTEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzTmFtZXMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY2xhc3NOYW1lLCBpLCBzZWxmLFxuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAodHJhYy0xNDY4NiwgdHJhYy0xNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKHRyYWMtMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICh0cmFjLTk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICh0cmFjLTk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKHRyYWMtNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gdHJhYy03NjUzLCB0cmFjLTgxMjUsIHRyYWMtODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAodHJhYy0xMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyB0cmFjLTk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICh0cmFjLTEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0IHRyYWMtMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICh0cmFjLTE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gdHJhYy05NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICh0cmFjLTExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyB0cmFjLTE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSB0cmFjLTg2MDUsIHRyYWMtMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vIHRyYWMtMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsXG5cdFx0Y29udGVudDogdHlwZSxcblx0XHRcIlwiOiBcIm91dGVyXCIgKyBuYW1lXG5cdH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXNcblx0XHRcdC5vbiggXCJtb3VzZWVudGVyXCIsIGZuT3ZlciApXG5cdFx0XHQub24oIFwibW91c2VsZWF2ZVwiLCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcbi8vIFJlcXVpcmUgdGhhdCB0aGUgXCJ3aGl0ZXNwYWNlIHJ1blwiIHN0YXJ0cyBmcm9tIGEgbm9uLXdoaXRlc3BhY2Vcbi8vIHRvIGF2b2lkIE8oTl4yKSBiZWhhdmlvciB3aGVuIHRoZSBlbmdpbmUgd291bGQgdHJ5IG1hdGNoaW5nIFwiXFxzKyRcIiBhdCBlYWNoIHNwYWNlIHBvc2l0aW9uLlxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8KFteXFxzXFx1RkVGRlxceEEwXSlbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICh0cmFjLTcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICh0cmFjLTEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qXG4gICAgIF8gXyAgICAgIF8gICAgICAgX1xuIF9fX3wgKF8pIF9fX3wgfCBfXyAgKF8pX19fXG4vIF9ffCB8IHwvIF9ffCB8LyAvICB8IC8gX198XG5cXF9fIFxcIHwgfCAoX198ICAgPCBfIHwgXFxfXyBcXFxufF9fXy9ffF98XFxfX198X3xcXF8oXykvIHxfX18vXG4gICAgICAgICAgICAgICAgICAgfF9fL1xuXG4gVmVyc2lvbjogMS44LjFcbiAgQXV0aG9yOiBLZW4gV2hlZWxlclxuIFdlYnNpdGU6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pb1xuICAgIERvY3M6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pby9zbGlja1xuICAgIFJlcG86IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2tcbiAgSXNzdWVzOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrL2lzc3Vlc1xuXG4gKi9cbi8qIGdsb2JhbCB3aW5kb3csIGRvY3VtZW50LCBkZWZpbmUsIGpRdWVyeSwgc2V0SW50ZXJ2YWwsIGNsZWFySW50ZXJ2YWwgKi9cbjsoZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICB9XG5cbn0oZnVuY3Rpb24oJCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgU2xpY2sgPSB3aW5kb3cuU2xpY2sgfHwge307XG5cbiAgICBTbGljayA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgaW5zdGFuY2VVaWQgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIFNsaWNrKGVsZW1lbnQsIHNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIHZhciBfID0gdGhpcywgZGF0YVNldHRpbmdzO1xuXG4gICAgICAgICAgICBfLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFwcGVuZEFycm93czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcHBlbmREb3RzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhc05hdkZvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHR5cGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLW5leHRcIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHR5cGU9XCJidXR0b25cIj5OZXh0PC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogMzAwMCxcbiAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAnNTBweCcsXG4gICAgICAgICAgICAgICAgY3NzRWFzZTogJ2Vhc2UnLFxuICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZzogZnVuY3Rpb24oc2xpZGVyLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAvPicpLnRleHQoaSArIDEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgICAgICAgICAgZG90c0NsYXNzOiAnc2xpY2stZG90cycsXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiAwLjM1LFxuICAgICAgICAgICAgICAgIGZhZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvY3VzT25DaGFuZ2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBsYXp5TG9hZDogJ29uZGVtYW5kJyxcbiAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Gb2N1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRG90c0hvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXNwb25kVG86ICd3aW5kb3cnLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IG51bGwsXG4gICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICBydGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlOiAnJyxcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgICAgICAgICAgc3dpcGU6IHRydWUsXG4gICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgdG91Y2hUaHJlc2hvbGQ6IDUsXG4gICAgICAgICAgICAgICAgdXNlQ1NTOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVRyYW5zZm9ybTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWxTd2lwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YWl0Rm9yQW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEwMDBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF8uaW5pdGlhbHMgPSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b1BsYXlUaW1lcjogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50RGlyZWN0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IDEsXG4gICAgICAgICAgICAgICAgJGRvdHM6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9hZEluZGV4OiAwLFxuICAgICAgICAgICAgICAgICRuZXh0QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgJHByZXZBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlQ291bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGVXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICAkc2xpZGVUcmFjazogbnVsbCxcbiAgICAgICAgICAgICAgICAkc2xpZGVzOiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBzd2lwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAkbGlzdDogbnVsbCxcbiAgICAgICAgICAgICAgICB0b3VjaE9iamVjdDoge30sXG4gICAgICAgICAgICAgICAgdHJhbnNmb3Jtc0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuc2xpY2tlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMpO1xuXG4gICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMgPSBbXTtcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzID0gW107XG4gICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gZmFsc2U7XG4gICAgICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmhpZGRlbiA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgXy5wb3NpdGlvblByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBudWxsO1xuICAgICAgICAgICAgXy5yb3dDb3VudCA9IDE7XG4gICAgICAgICAgICBfLnNob3VsZENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIF8uJHNsaWRlciA9ICQoZWxlbWVudCk7XG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAndmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gMDtcbiAgICAgICAgICAgIF8ud2luZG93VGltZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBkYXRhU2V0dGluZ3MgPSAkKGVsZW1lbnQpLmRhdGEoJ3NsaWNrJykgfHwge307XG5cbiAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLmRlZmF1bHRzLCBzZXR0aW5ncywgZGF0YVNldHRpbmdzKTtcblxuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuXG4gICAgICAgICAgICBfLm9yaWdpbmFsU2V0dGluZ3MgPSBfLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQubW96SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ21vekhpZGRlbic7XG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ21venZpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ3dlYmtpdEhpZGRlbic7XG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3dlYmtpdHZpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmF1dG9QbGF5ID0gJC5wcm94eShfLmF1dG9QbGF5LCBfKTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlDbGVhciA9ICQucHJveHkoXy5hdXRvUGxheUNsZWFyLCBfKTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlJdGVyYXRvciA9ICQucHJveHkoXy5hdXRvUGxheUl0ZXJhdG9yLCBfKTtcbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUgPSAkLnByb3h5KF8uY2hhbmdlU2xpZGUsIF8pO1xuICAgICAgICAgICAgXy5jbGlja0hhbmRsZXIgPSAkLnByb3h5KF8uY2xpY2tIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uc2VsZWN0SGFuZGxlciA9ICQucHJveHkoXy5zZWxlY3RIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24gPSAkLnByb3h5KF8uc2V0UG9zaXRpb24sIF8pO1xuICAgICAgICAgICAgXy5zd2lwZUhhbmRsZXIgPSAkLnByb3h5KF8uc3dpcGVIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uZHJhZ0hhbmRsZXIgPSAkLnByb3h5KF8uZHJhZ0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5rZXlIYW5kbGVyID0gJC5wcm94eShfLmtleUhhbmRsZXIsIF8pO1xuXG4gICAgICAgICAgICBfLmluc3RhbmNlVWlkID0gaW5zdGFuY2VVaWQrKztcblxuICAgICAgICAgICAgLy8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3NcbiAgICAgICAgICAgIC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uIChtdXN0IHN0YXJ0IHdpdGggPClcbiAgICAgICAgICAgIC8vIEV4dHJhY3RlZCBmcm9tIGpRdWVyeSB2MS4xMSBzb3VyY2VcbiAgICAgICAgICAgIF8uaHRtbEV4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC87XG5cblxuICAgICAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG4gICAgICAgICAgICBfLmluaXQodHJ1ZSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTbGljaztcblxuICAgIH0oKSk7XG5cbiAgICBTbGljay5wcm90b3R5cGUuYWN0aXZhdGVBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWFjdGl2ZScpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ2ZhbHNlJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYWRkU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tBZGQgPSBmdW5jdGlvbihtYXJrdXAsIGluZGV4LCBhZGRCZWZvcmUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgYWRkQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPCAwIHx8IChpbmRleCA+PSBfLnNsaWRlQ291bnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIF8uJHNsaWRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkZEJlZm9yZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRCZWZvcmUoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRBZnRlcihfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZGRCZWZvcmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudCkuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0YXJnZXRIZWlnaHRcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVTbGlkZSA9IGZ1bmN0aW9uKHRhcmdldExlZnQsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIGFuaW1Qcm9wcyA9IHt9LFxuICAgICAgICAgICAgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IC10YXJnZXRMZWZ0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudExlZnQgPSAtKF8uY3VycmVudExlZnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiBfLmN1cnJlbnRMZWZ0XG4gICAgICAgICAgICAgICAgfSkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IF8ub3B0aW9ucy5zcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBfLm9wdGlvbnMuZWFzaW5nLFxuICAgICAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbihub3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IE1hdGguY2VpbChub3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoMHB4LCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IE1hdGguY2VpbCh0YXJnZXRMZWZ0KTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4LCAwcHgpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoMHB4LCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdlRhcmdldCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5vcHRpb25zLmFzTmF2Rm9yO1xuXG4gICAgICAgIGlmICggYXNOYXZGb3IgJiYgYXNOYXZGb3IgIT09IG51bGwgKSB7XG4gICAgICAgICAgICBhc05hdkZvciA9ICQoYXNOYXZGb3IpLm5vdChfLiRzbGlkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzTmF2Rm9yO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hc05hdkZvciA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLmdldE5hdlRhcmdldCgpO1xuXG4gICAgICAgIGlmICggYXNOYXZGb3IgIT09IG51bGwgJiYgdHlwZW9mIGFzTmF2Rm9yID09PSAnb2JqZWN0JyApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuc2xpY2soJ2dldFNsaWNrJyk7XG4gICAgICAgICAgICAgICAgaWYoIXRhcmdldC51bnNsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNsaWRlSGFuZGxlcihpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXBwbHlUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9IF8udHJhbnNmb3JtVHlwZSArICcgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJ29wYWNpdHkgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlUaW1lciA9IHNldEludGVydmFsKCBfLmF1dG9QbGF5SXRlcmF0b3IsIF8ub3B0aW9ucy5hdXRvcGxheVNwZWVkICk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlDbGVhciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5hdXRvUGxheVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlJdGVyYXRvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlVG8gPSBfLmN1cnJlbnRTbGlkZSArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICBpZiAoICFfLnBhdXNlZCAmJiAhXy5pbnRlcnJ1cHRlZCAmJiAhXy5mb2N1c3NlZCApIHtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMSAmJiAoIF8uY3VycmVudFNsaWRlICsgMSApID09PSAoIF8uc2xpZGVDb3VudCAtIDEgKSkge1xuICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIF8uZGlyZWN0aW9uID09PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlVG8gPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIF8uY3VycmVudFNsaWRlIC0gMSA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZVRvICk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZEFycm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93ID0gJChfLm9wdGlvbnMucHJldkFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyA9ICQoXy5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG5cbiAgICAgICAgICAgIGlmKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnByZXBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZCggXy4kbmV4dEFycm93IClcblxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGREb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgZG90O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgICAgIGRvdCA9ICQoJzx1bCAvPicpLmFkZENsYXNzKF8ub3B0aW9ucy5kb3RzQ2xhc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IF8uZ2V0RG90Q291bnQoKTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZG90LmFwcGVuZCgkKCc8bGkgLz4nKS5hcHBlbmQoXy5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsIF8sIGkpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJGRvdHMgPSBkb3QuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZERvdHMpO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmZpbmQoJ2xpJykuZmlyc3QoKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZE91dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCBfLm9wdGlvbnMuc2xpZGUgKyAnOm5vdCguc2xpY2stY2xvbmVkKScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KVxuICAgICAgICAgICAgICAgIC5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnLCAkKGVsZW1lbnQpLmF0dHIoJ3N0eWxlJykgfHwgJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2sgPSAoXy5zbGlkZUNvdW50ID09PSAwKSA/XG4gICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oXy4kc2xpZGVyKSA6XG4gICAgICAgICAgICBfLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpO1xuXG4gICAgICAgIF8uJGxpc3QgPSBfLiRzbGlkZVRyYWNrLndyYXAoXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCk7XG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKCdvcGFjaXR5JywgMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlIHx8IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlcikubm90KCdbc3JjXScpLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG5cbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuXG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG5cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5hZGRDbGFzcygnZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBhLCBiLCBjLCBuZXdTbGlkZXMsIG51bU9mU2xpZGVzLCBvcmlnaW5hbFNsaWRlcyxzbGlkZXNQZXJTZWN0aW9uO1xuXG4gICAgICAgIG5ld1NsaWRlcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXIuY2hpbGRyZW4oKTtcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcblxuICAgICAgICAgICAgc2xpZGVzUGVyU2VjdGlvbiA9IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cgKiBfLm9wdGlvbnMucm93cztcbiAgICAgICAgICAgIG51bU9mU2xpZGVzID0gTWF0aC5jZWlsKFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLmxlbmd0aCAvIHNsaWRlc1BlclNlY3Rpb25cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvcihhID0gMDsgYSA8IG51bU9mU2xpZGVzOyBhKyspe1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGZvcihiID0gMDsgYiA8IF8ub3B0aW9ucy5yb3dzOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IoYyA9IDA7IGMgPCBfLm9wdGlvbnMuc2xpZGVzUGVyUm93OyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAoYSAqIHNsaWRlc1BlclNlY3Rpb24gKyAoKGIgKiBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArIGMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2xpZGVzLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG5ld1NsaWRlcyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzooMTAwIC8gXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyAnJScsXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uKGluaXRpYWwsIGZvcmNlVXBkYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtwb2ludCwgdGFyZ2V0QnJlYWtwb2ludCwgcmVzcG9uZFRvV2lkdGgsIHRyaWdnZXJCcmVha3BvaW50ID0gZmFsc2U7XG4gICAgICAgIHZhciBzbGlkZXJXaWR0aCA9IF8uJHNsaWRlci53aWR0aCgpO1xuICAgICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCAkKHdpbmRvdykud2lkdGgoKTtcblxuICAgICAgICBpZiAoXy5yZXNwb25kVG8gPT09ICd3aW5kb3cnKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHdpbmRvd1dpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnc2xpZGVyJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBzbGlkZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ21pbicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gTWF0aC5taW4od2luZG93V2lkdGgsIHNsaWRlcldpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnJlc3BvbnNpdmUgJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA+IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBfLmFjdGl2ZUJyZWFrcG9pbnQgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9IF8ub3JpZ2luYWxTZXR0aW5ncztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9ubHkgdHJpZ2dlciBicmVha3BvaW50cyBkdXJpbmcgYW4gYWN0dWFsIGJyZWFrLiBub3Qgb24gaW5pdGlhbGl6ZS5cbiAgICAgICAgICAgIGlmKCAhaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JyZWFrcG9pbnQnLCBbXywgdHJpZ2dlckJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGFuZ2VTbGlkZSA9IGZ1bmN0aW9uKGV2ZW50LCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICAgICAgaW5kZXhPZmZzZXQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQ7XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIGEgbGluaywgcHJldmVudCBkZWZhdWx0IGFjdGlvbi5cbiAgICAgICAgaWYoJHRhcmdldC5pcygnYScpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG5vdCB0aGUgPGxpPiBlbGVtZW50IChpZTogYSBjaGlsZCksIGZpbmQgdGhlIDxsaT4uXG4gICAgICAgIGlmKCEkdGFyZ2V0LmlzKCdsaScpKSB7XG4gICAgICAgICAgICAkdGFyZ2V0ID0gJHRhcmdldC5jbG9zZXN0KCdsaScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5ldmVuT2Zmc2V0ID0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCk7XG4gICAgICAgIGluZGV4T2Zmc2V0ID0gdW5ldmVuT2Zmc2V0ID8gMCA6IChfLnNsaWRlQ291bnQgLSBfLmN1cnJlbnRTbGlkZSkgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLm1lc3NhZ2UpIHtcblxuICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnaW5kZXgnOlxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRhdGEuaW5kZXggPT09IDAgPyAwIDpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmNoZWNrTmF2aWdhYmxlKGluZGV4KSwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmNoaWxkcmVuKCkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG5hdmlnYWJsZXMsIHByZXZOYXZpZ2FibGU7XG5cbiAgICAgICAgbmF2aWdhYmxlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpO1xuICAgICAgICBwcmV2TmF2aWdhYmxlID0gMDtcbiAgICAgICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IG5hdmlnYWJsZXNbbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyAmJiBfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9mZignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub2ZmKF8udmlzaWJpbGl0eUNoYW5nZSwgXy52aXNpYmlsaXR5KTtcblxuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5vcmllbnRhdGlvbkNoYW5nZSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnJlc2l6ZSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vZmYoJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIG9yaWdpbmFsU2xpZGVzO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMCkge1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvcmlnaW5hbFNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uc2hvdWxkQ2xpY2sgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24ocmVmcmVzaCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgXy5jbGVhblVwRXZlbnRzKCk7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikuZGV0YWNoKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5wcmV2QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLm5leHRBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoXy4kc2xpZGVzKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXInKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZighcmVmcmVzaCkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICcnO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcbiAgICAgICAgICAgIC5vbignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycsICcqJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgJHNmID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucGF1c2VPbkZvY3VzICkge1xuICAgICAgICAgICAgICAgICAgICBfLmZvY3Vzc2VkID0gJHNmLmlzKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRDdXJyZW50ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICByZXR1cm4gXy5jdXJyZW50U2xpZGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldERvdENvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciBicmVha1BvaW50ID0gMDtcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICB2YXIgcGFnZXJRdHkgPSAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIGlmKCFfLm9wdGlvbnMuYXNOYXZGb3IpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gMSArIE1hdGguY2VpbCgoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXJRdHkgLSAxO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRMZWZ0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQsXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHRhcmdldFNsaWRlLFxuICAgICAgICAgICAgY29lZjtcblxuICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoXy5zbGlkZVdpZHRoICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiAtMTtcbiAgICAgICAgICAgICAgICBjb2VmID0gLTFcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMS41O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHZlcnRpY2FsSGVpZ2h0ICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiBjb2VmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID4gXy5zbGlkZUNvdW50ICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiBfLnNsaWRlV2lkdGg7XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiB2ZXJ0aWNhbEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIC8gMikgLSAoKF8uc2xpZGVXaWR0aCAqIF8uc2xpZGVDb3VudCkgLyAyKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgLSBfLnNsaWRlV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogXy5zbGlkZVdpZHRoKSAqIC0xKSArIF8uc2xpZGVPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogdmVydGljYWxIZWlnaHQpICogLTEpICsgdmVydGljYWxPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgKz0gKF8uJGxpc3Qud2lkdGgoKSAtIHRhcmdldFNsaWRlLm91dGVyV2lkdGgoKSkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldExlZnQ7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE9wdGlvbiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICByZXR1cm4gXy5vcHRpb25zW29wdGlvbl07XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha1BvaW50ID0gMCxcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgICAgbWF4O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBjb3VudGVyID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBtYXgpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChicmVha1BvaW50KTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXhlcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpY2sgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCwgc3dpcGVkU2xpZGUsIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSA/IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBzbGlkZSkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZS5vZmZzZXRMZWZ0IC0gY2VudGVyT2Zmc2V0ICsgKCQoc2xpZGUpLm91dGVyV2lkdGgoKSAvIDIpID4gKF8uc3dpcGVMZWZ0ICogLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoJChzd2lwZWRTbGlkZSkuYXR0cignZGF0YS1zbGljay1pbmRleCcpIC0gXy5jdXJyZW50U2xpZGUpIHx8IDE7XG5cbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ29UbyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dvVG8gPSBmdW5jdGlvbihzbGlkZSwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyc2VJbnQoc2xpZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGRvbnRBbmltYXRlKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGNyZWF0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICghJChfLiRzbGlkZXIpLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG5cbiAgICAgICAgICAgICQoXy4kc2xpZGVyKS5hZGRDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcblxuICAgICAgICAgICAgXy5idWlsZFJvd3MoKTtcbiAgICAgICAgICAgIF8uYnVpbGRPdXQoKTtcbiAgICAgICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgICAgIF8uc3RhcnRMb2FkKCk7XG4gICAgICAgICAgICBfLmxvYWRTbGlkZXIoKTtcbiAgICAgICAgICAgIF8uaW5pdGlhbGl6ZUV2ZW50cygpO1xuICAgICAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUodHJ1ZSk7XG4gICAgICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JlYXRpb24pIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdpbml0JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgICAgIG51bURvdEdyb3VwcyA9IE1hdGguY2VpbChfLnNsaWRlQ291bnQgLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxcbiAgICAgICAgICAgICAgICB0YWJDb250cm9sSW5kZXhlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh2YWwgPj0gMCkgJiYgKHZhbCA8IF8uc2xpZGVDb3VudCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmFkZChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXy4kc2xpZGVzLm5vdChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlQ29udHJvbEluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXMuaW5kZXhPZihpKTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYnBhbmVsJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlQ29udHJvbEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgIHZhciBhcmlhQnV0dG9uQ29udHJvbCA9ICdzbGljay1zbGlkZS1jb250cm9sJyArIF8uaW5zdGFuY2VVaWQgKyBzbGlkZUNvbnRyb2xJbmRleFxuICAgICAgICAgICAgICAgICAgIGlmICgkKCcjJyArIGFyaWFCdXR0b25Db250cm9sKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhQnV0dG9uQ29udHJvbFxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpLmZpbmQoJ2xpJykuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hcHBlZFNsaWRlSW5kZXggPSB0YWJDb250cm9sSW5kZXhlc1tpXTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3ByZXNlbnRhdGlvbidcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnYnV0dG9uJykuZmlyc3QoKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlLWNvbnRyb2wnICsgXy5pbnN0YW5jZVVpZCArIGksXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBtYXBwZWRTbGlkZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6IChpICsgMSkgKyAnIG9mICcgKyBudW1Eb3RHcm91cHMsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KS5lcShfLmN1cnJlbnRTbGlkZSkuZmluZCgnYnV0dG9uJykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgICAgICB9KS5lbmQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGk9Xy5jdXJyZW50U2xpZGUsIG1heD1pK18ub3B0aW9ucy5zbGlkZXNUb1Nob3c7IGkgPCBtYXg7IGkrKykge1xuICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGkpLmF0dHIoeyd0YWJpbmRleCc6ICcwJ30pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoaSkucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmFjdGl2YXRlQURBKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdERvdEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKS5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4J1xuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGRvdHMub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8ub3B0aW9ucy5wYXVzZU9uRG90c0hvdmVyID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xuXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG5cbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdzdGFydCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnbW92ZSdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ub3JpZW50YXRpb25DaGFuZ2UsIF8pKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgIC8vRG9udCBzbGlkZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgZm9ybSBmaWVsZHMgYW5kIGFycm93IGtleXMgYXJlIHByZXNzZWRcbiAgICAgICAgaWYoIWV2ZW50LnRhcmdldC50YWdOYW1lLm1hdGNoKCdURVhUQVJFQXxJTlBVVHxTRUxFQ1QnKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAgJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAncHJldmlvdXMnIDogJ25leHQnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGxvYWRSYW5nZSwgY2xvbmVSYW5nZSwgcmFuZ2VTdGFydCwgcmFuZ2VFbmQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZEltYWdlcyhpbWFnZXNTY29wZSkge1xuXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNyY1NldCA9ICQodGhpcykuYXR0cignZGF0YS1zcmNzZXQnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTaXplcyAgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU3JjU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTaXplcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc2l6ZXMnLCBpbWFnZVNpemVzICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMSB9LCAyMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gMiArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpICsgXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5vcHRpb25zLmluZmluaXRlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIF8uY3VycmVudFNsaWRlIDogXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICByYW5nZUVuZCA9IE1hdGguY2VpbChyYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbmQgPD0gXy5zbGlkZUNvdW50KSByYW5nZUVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnYW50aWNpcGF0ZWQnKSB7XG4gICAgICAgICAgICB2YXIgcHJldlNsaWRlID0gcmFuZ2VTdGFydCAtIDEsXG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlID0gcmFuZ2VFbmQsXG4gICAgICAgICAgICAgICAgJHNsaWRlcyA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U2xpZGUgPCAwKSBwcmV2U2xpZGUgPSBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShwcmV2U2xpZGUpKTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEobmV4dFNsaWRlKSk7XG4gICAgICAgICAgICAgICAgcHJldlNsaWRlLS07XG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkSW1hZ2VzKGxvYWRSYW5nZSk7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZSgwLCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMSk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxvYWRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5pbml0VUkoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAncHJvZ3Jlc3NpdmUnKSB7XG4gICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5uZXh0ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrTmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGF1c2UgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQYXVzZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcbiAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wbGF5ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIF8ub3B0aW9ucy5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wb3N0U2xpZGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIV8udW5zbGlja2VkICkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWZ0ZXJDaGFuZ2UnLCBbXywgaW5kZXhdKTtcblxuICAgICAgICAgICAgXy5hbmltYXRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmluaXRBREEoKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGN1cnJlbnRTbGlkZSA9ICQoXy4kc2xpZGVzLmdldChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICAgICAgICAgICAgICAkY3VycmVudFNsaWRlLmF0dHIoJ3RhYmluZGV4JywgMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUHJldiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZCA9IGZ1bmN0aW9uKCB0cnlDb3VudCApIHtcblxuICAgICAgICB0cnlDb3VudCA9IHRyeUNvdW50IHx8IDE7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJGltZ3NUb0xvYWQgPSAkKCAnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIgKSxcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgaW1hZ2VTb3VyY2UsXG4gICAgICAgICAgICBpbWFnZVNyY1NldCxcbiAgICAgICAgICAgIGltYWdlU2l6ZXMsXG4gICAgICAgICAgICBpbWFnZVRvTG9hZDtcblxuICAgICAgICBpZiAoICRpbWdzVG9Mb2FkLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgaW1hZ2UgPSAkaW1nc1RvTG9hZC5maXJzdCgpO1xuICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSBpbWFnZS5hdHRyKCdkYXRhLWxhenknKTtcbiAgICAgICAgICAgIGltYWdlU3JjU2V0ID0gaW1hZ2UuYXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gaW1hZ2UuYXR0cignZGF0YS1zaXplcycpIHx8IF8uJHNsaWRlci5hdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbWFnZVNyY1NldCkge1xuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIGltYWdlU3JjU2V0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NpemVzJywgaW1hZ2VTaXplcyApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBpbWFnZVNvdXJjZSApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenkgZGF0YS1zcmNzZXQgZGF0YS1zaXplcycpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHRyeUNvdW50IDwgMyApIHtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogdHJ5IHRvIGxvYWQgdGhlIGltYWdlIDMgdGltZXMsXG4gICAgICAgICAgICAgICAgICAgICAqIGxlYXZlIGEgc2xpZ2h0IGRlbGF5IHNvIHdlIGRvbid0IGdldFxuICAgICAgICAgICAgICAgICAgICAgKiBzZXJ2ZXJzIGJsb2NraW5nIHRoZSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoIHRyeUNvdW50ICsgMSApO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWxsSW1hZ2VzTG9hZGVkJywgWyBfIF0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCBpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBjdXJyZW50U2xpZGUsIGxhc3RWaXNpYmxlSW5kZXg7XG5cbiAgICAgICAgbGFzdFZpc2libGVJbmRleCA9IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG5cbiAgICAgICAgLy8gaW4gbm9uLWluZmluaXRlIHNsaWRlcnMsIHdlIGRvbid0IHdhbnQgdG8gZ28gcGFzdCB0aGVcbiAgICAgICAgLy8gbGFzdCB2aXNpYmxlIGluZGV4LlxuICAgICAgICBpZiggIV8ub3B0aW9ucy5pbmZpbml0ZSAmJiAoIF8uY3VycmVudFNsaWRlID4gbGFzdFZpc2libGVJbmRleCApKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGxhc3RWaXNpYmxlSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBsZXNzIHNsaWRlcyB0aGFuIHRvIHNob3csIGdvIHRvIHN0YXJ0LlxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuXG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcblxuICAgICAgICBfLmRlc3Ryb3kodHJ1ZSk7XG5cbiAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscywgeyBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSB9KTtcblxuICAgICAgICBfLmluaXQoKTtcblxuICAgICAgICBpZiggIWluaXRpYWxpemluZyApIHtcblxuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogY3VycmVudFNsaWRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYnJlYWtwb2ludCwgY3VycmVudEJyZWFrcG9pbnQsIGwsXG4gICAgICAgICAgICByZXNwb25zaXZlU2V0dGluZ3MgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZSB8fCBudWxsO1xuXG4gICAgICAgIGlmICggJC50eXBlKHJlc3BvbnNpdmVTZXR0aW5ncykgPT09ICdhcnJheScgJiYgcmVzcG9uc2l2ZVNldHRpbmdzLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBfLm9wdGlvbnMucmVzcG9uZFRvIHx8ICd3aW5kb3cnO1xuXG4gICAgICAgICAgICBmb3IgKCBicmVha3BvaW50IGluIHJlc3BvbnNpdmVTZXR0aW5ncyApIHtcblxuICAgICAgICAgICAgICAgIGwgPSBfLmJyZWFrcG9pbnRzLmxlbmd0aC0xO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNpdmVTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5icmVha3BvaW50O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgYnJlYWtwb2ludHMgYW5kIGN1dCBvdXQgYW55IGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZXMgd2l0aCB0aGUgc2FtZSBicmVha3BvaW50IG51bWJlciwgd2UgZG9uJ3Qgd2FudCBkdXBlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLmJyZWFrcG9pbnRzW2xdICYmIF8uYnJlYWtwb2ludHNbbF0gPT09IGN1cnJlbnRCcmVha3BvaW50ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc3BsaWNlKGwsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnB1c2goY3VycmVudEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tjdXJyZW50QnJlYWtwb2ludF0gPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uc2V0dGluZ3M7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCBfLm9wdGlvbnMubW9iaWxlRmlyc3QgKSA/IGEtYiA6IGItYTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVpbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlcyA9XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKF8ub3B0aW9ucy5zbGlkZSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50ICYmIF8uY3VycmVudFNsaWRlICE9PSAwKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcblxuICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZShmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICBfLnBhdXNlZCA9ICFfLm9wdGlvbnMuYXV0b3BsYXk7XG4gICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigncmVJbml0JywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSAhPT0gXy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF8ud2luZG93RGVsYXkpO1xuICAgICAgICAgICAgXy53aW5kb3dEZWxheSA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICAgICAgICAgIGlmKCAhXy51bnNsaWNrZWQgKSB7IF8uc2V0UG9zaXRpb24oKTsgfVxuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZW1vdmVTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1JlbW92ZSA9IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVCZWZvcmUsIHJlbW92ZUFsbCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZW1vdmVCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gMCA6IF8uc2xpZGVDb3VudCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IC0taW5kZXggOiBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPCAxIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IF8uc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHJlbW92ZUFsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmVxKGluZGV4KS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRDU1MgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIHgsIHk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gLXBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHggPSBfLnBvc2l0aW9uUHJvcCA9PSAnbGVmdCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuICAgICAgICB5ID0gXy5wb3NpdGlvblByb3AgPT0gJ3RvcCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuXG4gICAgICAgIHBvc2l0aW9uUHJvcHNbXy5wb3NpdGlvblByb3BdID0gcG9zaXRpb247XG5cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fTtcbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJywgJyArIHkgKyAnKSc7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHggKyAnLCAnICsgeSArICcsIDBweCknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldERpbWVuc2lvbnMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKCcwcHggJyArIF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kbGlzdC5oZWlnaHQoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5saXN0V2lkdGggPSBfLiRsaXN0LndpZHRoKCk7XG4gICAgICAgIF8ubGlzdEhlaWdodCA9IF8uJGxpc3QuaGVpZ2h0KCk7XG5cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSAmJiBfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCAvIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoKF8uc2xpZGVXaWR0aCAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcblxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKDUwMDAgKiBfLnNsaWRlQ291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoKTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suaGVpZ2h0KE1hdGguY2VpbCgoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCh0cnVlKSAtIF8uJHNsaWRlcy5maXJzdCgpLndpZHRoKCk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLndpZHRoKF8uc2xpZGVXaWR0aCAtIG9mZnNldCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEZhZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0O1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uc2xpZGVXaWR0aCAqIGluZGV4KSAqIC0xO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLmNzcyh7XG4gICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAxLFxuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuY3NzKCdoZWlnaHQnLCB0YXJnZXRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldE9wdGlvbiA9XG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWNrU2V0T3B0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFjY2VwdHMgYXJndW1lbnRzIGluIGZvcm1hdCBvZjpcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2luZ2xlIG9wdGlvbidzIHZhbHVlOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzZXQgb2YgcmVzcG9uc2l2ZSBvcHRpb25zOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsICdyZXNwb25zaXZlJywgW3t9LCAuLi5dLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIHVwZGF0aW5nIG11bHRpcGxlIHZhbHVlcyBhdCBvbmNlIChub3QgcmVzcG9uc2l2ZSlcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCB7ICdvcHRpb24nOiB2YWx1ZSwgLi4uIH0sIHJlZnJlc2ggKVxuICAgICAgICAgKi9cblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGwsIGl0ZW0sIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggPSBmYWxzZSwgdHlwZTtcblxuICAgICAgICBpZiggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ29iamVjdCcgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgdHlwZSA9ICdtdWx0aXBsZSc7XG5cbiAgICAgICAgfSBlbHNlIGlmICggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ3N0cmluZycgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgICAgIGlmICggYXJndW1lbnRzWzBdID09PSAncmVzcG9uc2l2ZScgJiYgJC50eXBlKCBhcmd1bWVudHNbMV0gKSA9PT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAncmVzcG9uc2l2ZSc7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzaW5nbGUnO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdHlwZSA9PT0gJ3NpbmdsZScgKSB7XG5cbiAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAnbXVsdGlwbGUnICkge1xuXG4gICAgICAgICAgICAkLmVhY2goIG9wdGlvbiAsIGZ1bmN0aW9uKCBvcHQsIHZhbCApIHtcblxuICAgICAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRdID0gdmFsO1xuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICdyZXNwb25zaXZlJyApIHtcblxuICAgICAgICAgICAgZm9yICggaXRlbSBpbiB2YWx1ZSApIHtcblxuICAgICAgICAgICAgICAgIGlmKCAkLnR5cGUoIF8ub3B0aW9ucy5yZXNwb25zaXZlICkgIT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgPSBbIHZhbHVlW2l0ZW1dIF07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGwgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIHJlc3BvbnNpdmUgb2JqZWN0IGFuZCBzcGxpY2Ugb3V0IGR1cGxpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucmVzcG9uc2l2ZVtsXS5icmVha3BvaW50ID09PSB2YWx1ZVtpdGVtXS5icmVha3BvaW50ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUuc3BsaWNlKGwsMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKCB2YWx1ZVtpdGVtXSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggcmVmcmVzaCApIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldERpbWVuc2lvbnMoKTtcblxuICAgICAgICBfLnNldEhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2V0Q1NTKF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zZXRGYWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc2V0UG9zaXRpb24nLCBbX10pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQcm9wcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG5cbiAgICAgICAgXy5wb3NpdGlvblByb3AgPSBfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgPyAndG9wJyA6ICdsZWZ0JztcblxuICAgICAgICBpZiAoXy5wb3NpdGlvblByb3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLldlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLk1velRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLm1zVHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnVzZUNTUyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZmFkZSApIHtcbiAgICAgICAgICAgIGlmICggdHlwZW9mIF8ub3B0aW9ucy56SW5kZXggPT09ICdudW1iZXInICkge1xuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMuekluZGV4IDwgMyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gXy5kZWZhdWx0cy56SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLk9UcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdPVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctby10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdPVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUuTW96VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnTW96VHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbW96LXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ01velRyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLk1velBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLndlYmtpdFRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3dlYmtpdFRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLXdlYmtpdC10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd3ZWJraXRUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ21zVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbXMtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnbXNUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUudHJhbnNmb3JtICE9PSB1bmRlZmluZWQgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd0cmFuc2l0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBfLnRyYW5zZm9ybXNFbmFibGVkID0gXy5vcHRpb25zLnVzZVRyYW5zZm9ybSAmJiAoXy5hbmltVHlwZSAhPT0gbnVsbCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSk7XG4gICAgfTtcblxuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0LCBhbGxTbGlkZXMsIGluZGV4T2Zmc2V0LCByZW1haW5kZXI7XG5cbiAgICAgICAgYWxsU2xpZGVzID0gXy4kc2xpZGVyXG4gICAgICAgICAgICAuZmluZCgnLnNsaWNrLXNsaWRlJylcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWN1cnJlbnQnKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgdmFyIGV2ZW5Db2VmID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAlIDIgPT09IDAgPyAxIDogMDtcblxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBjZW50ZXJPZmZzZXQgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIDEpIC0gY2VudGVyT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4IC0gY2VudGVyT2Zmc2V0ICsgZXZlbkNvZWYsIGluZGV4ICsgY2VudGVyT2Zmc2V0ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSBjZW50ZXJPZmZzZXQgKyAxICsgZXZlbkNvZWYsIGluZGV4T2Zmc2V0ICsgY2VudGVyT2Zmc2V0ICsgMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoYWxsU2xpZGVzLmxlbmd0aCAtIDEgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IF8uc2xpZGVDb3VudCAtIDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIHtcblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXgsIGluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGxTbGlkZXMubGVuZ3RoIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgcmVtYWluZGVyID0gXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleCA6IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICYmIChfLnNsaWRlQ291bnQgLSBpbmRleCkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIHJlbWFpbmRlciksIGluZGV4T2Zmc2V0ICsgcmVtYWluZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0LCBpbmRleE9mZnNldCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnb25kZW1hbmQnIHx8IF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xuICAgICAgICAgICAgXy5sYXp5TG9hZCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXR1cEluZmluaXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgc2xpZGVJbmRleCwgaW5maW5pdGVDb3VudDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5jZW50ZXJNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlICYmIF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gXy5zbGlkZUNvdW50OyBpID4gKF8uc2xpZGVDb3VudCAtXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50KTsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluZmluaXRlQ291bnQgICsgXy5zbGlkZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4ICsgXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykuZmluZCgnW2lkXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignaWQnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uKCB0b2dnbGUgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCAhdG9nZ2xlICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICB9XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0b2dnbGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNlbGVjdEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9XG4gICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuaXMoJy5zbGljay1zbGlkZScpID9cbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkgOlxuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh0YXJnZXRFbGVtZW50LmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSk7XG5cbiAgICAgICAgaWYgKCFpbmRleCkgaW5kZXggPSAwO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uKGluZGV4LCBzeW5jLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciB0YXJnZXRTbGlkZSwgYW5pbVNsaWRlLCBvbGRTbGlkZSwgc2xpZGVMZWZ0LCB0YXJnZXRMZWZ0ID0gbnVsbCxcbiAgICAgICAgICAgIF8gPSB0aGlzLCBuYXZUYXJnZXQ7XG5cbiAgICAgICAgc3luYyA9IHN5bmMgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlICYmIF8ub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlICYmIF8uY3VycmVudFNsaWRlID09PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFzTmF2Rm9yKGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XG4gICAgICAgIHRhcmdldExlZnQgPSBfLmdldExlZnQodGFyZ2V0U2xpZGUpO1xuICAgICAgICBzbGlkZUxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8uY3VycmVudExlZnQgPSBfLnN3aXBlTGVmdCA9PT0gbnVsbCA/IHNsaWRlTGVmdCA6IF8uc3dpcGVMZWZ0O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gXy5nZXREb3RDb3VudCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgLSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50ICsgdGFyZ2V0U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGUgLSBfLnNsaWRlQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgW18sIF8uY3VycmVudFNsaWRlLCBhbmltU2xpZGVdKTtcblxuICAgICAgICBvbGRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGFuaW1TbGlkZTtcblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXNOYXZGb3IgKSB7XG5cbiAgICAgICAgICAgIG5hdlRhcmdldCA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBuYXZUYXJnZXQuc2xpY2soJ2dldFNsaWNrJyk7XG5cbiAgICAgICAgICAgIGlmICggbmF2VGFyZ2V0LnNsaWRlQ291bnQgPD0gbmF2VGFyZ2V0Lm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgICAgIG5hdlRhcmdldC5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGVPdXQob2xkU2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGUoYW5pbVNsaWRlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUodGFyZ2V0TGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zdGFydExvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuaGlkZSgpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZURpcmVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciB4RGlzdCwgeURpc3QsIHIsIHN3aXBlQW5nbGUsIF8gPSB0aGlzO1xuXG4gICAgICAgIHhEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFggLSBfLnRvdWNoT2JqZWN0LmN1clg7XG4gICAgICAgIHlEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFkgLSBfLnRvdWNoT2JqZWN0LmN1clk7XG4gICAgICAgIHIgPSBNYXRoLmF0YW4yKHlEaXN0LCB4RGlzdCk7XG5cbiAgICAgICAgc3dpcGVBbmdsZSA9IE1hdGgucm91bmQociAqIDE4MCAvIE1hdGguUEkpO1xuICAgICAgICBpZiAoc3dpcGVBbmdsZSA8IDApIHtcbiAgICAgICAgICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSA0NSkgJiYgKHN3aXBlQW5nbGUgPj0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gMzYwKSAmJiAoc3dpcGVBbmdsZSA+PSAzMTUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDEzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMjI1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdyaWdodCcgOiAnbGVmdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMzUpICYmIChzd2lwZUFuZ2xlIDw9IDEzNSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3VwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAndmVydGljYWwnO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVDb3VudCxcbiAgICAgICAgICAgIGRpcmVjdGlvbjtcblxuICAgICAgICBfLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIF8uc3dpcGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLnNjcm9sbGluZykge1xuICAgICAgICAgICAgXy5zY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgXy5zaG91bGRDbGljayA9ICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDEwICkgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmN1clggPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5lZGdlSGl0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2VkZ2UnLCBbXywgXy5zd2lwZURpcmVjdGlvbigpIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID49IF8udG91Y2hPYmplY3QubWluU3dpcGUgKSB7XG5cbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICAgICAgc3dpdGNoICggZGlyZWN0aW9uICkge1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG93bic6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBjYXNlICd1cCc6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggZGlyZWN0aW9uICE9ICd2ZXJ0aWNhbCcgKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVDb3VudCApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc3dpcGUnLCBbXywgZGlyZWN0aW9uIF0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAhPT0gXy50b3VjaE9iamVjdC5jdXJYICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIF8uY3VycmVudFNsaWRlICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoKF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpIHx8ICgnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQgJiYgXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSBmYWxzZSAmJiBldmVudC50eXBlLmluZGV4T2YoJ21vdXNlJykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoIDogMTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0V2lkdGggLyBfLm9wdGlvbnNcbiAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdEhlaWdodCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5hY3Rpb24pIHtcblxuICAgICAgICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVTdGFydChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ21vdmUnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlRW5kKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgZWRnZVdhc0hpdCA9IGZhbHNlLFxuICAgICAgICAgICAgY3VyTGVmdCwgc3dpcGVEaXJlY3Rpb24sIHN3aXBlTGVuZ3RoLCBwb3NpdGlvbk9mZnNldCwgdG91Y2hlcywgdmVydGljYWxTd2lwZUxlbmd0aDtcblxuICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzIDogbnVsbDtcblxuICAgICAgICBpZiAoIV8uZHJhZ2dpbmcgfHwgXy5zY3JvbGxpbmcgfHwgdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWCAtIF8udG91Y2hPYmplY3Quc3RhcnRYLCAyKSkpO1xuXG4gICAgICAgIHZlcnRpY2FsU3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWSAtIF8udG91Y2hPYmplY3Quc3RhcnRZLCAyKSkpO1xuXG4gICAgICAgIGlmICghXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyAmJiAhXy5zd2lwaW5nICYmIHZlcnRpY2FsU3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBfLnNjcm9sbGluZyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IHZlcnRpY2FsU3dpcGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZURpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBfLnN3aXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gMSA6IC0xKSAqIChfLnRvdWNoT2JqZWN0LmN1clggPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbk9mZnNldCA9IF8udG91Y2hPYmplY3QuY3VyWSA+IF8udG91Y2hPYmplY3Quc3RhcnRZID8gMSA6IC0xO1xuICAgICAgICB9XG5cblxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICgoXy5jdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHx8IChfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0JykpIHtcbiAgICAgICAgICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggKiBfLm9wdGlvbnMuZWRnZUZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIChzd2lwZUxlbmd0aCAqIChfLiRsaXN0LmhlaWdodCgpIC8gXy5saXN0V2lkdGgpKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdG91Y2hlcztcblxuICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCAhPT0gMSB8fCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRYID0gXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRZID0gXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrVW5maWx0ZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJHNsaWRlc0NhY2hlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bnNsaWNrID0gZnVuY3Rpb24oZnJvbUJyZWFrcG9pbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCd1bnNsaWNrJywgW18sIGZyb21CcmVha3BvaW50XSk7XG4gICAgICAgIF8uZGVzdHJveSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmXG4gICAgICAgICAgICBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmXG4gICAgICAgICAgICAhXy5vcHRpb25zLmluZmluaXRlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gMSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZURvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmVuZCgpO1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAuZXEoTWF0aC5mbG9vcihfLmN1cnJlbnRTbGlkZSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIGlmICggZG9jdW1lbnRbXy5oaWRkZW5dICkge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgJC5mbi5zbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBvcHQgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGwgPSBfLmxlbmd0aCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICByZXQ7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0ID09ICdvYmplY3QnIHx8IHR5cGVvZiBvcHQgPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgX1tpXS5zbGljayA9IG5ldyBTbGljayhfW2ldLCBvcHQpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldCA9IF9baV0uc2xpY2tbb3B0XS5hcHBseShfW2ldLnNsaWNrLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0ICE9ICd1bmRlZmluZWQnKSByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfO1xuICAgIH07XG5cbn0pKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICFzY3JpcHRVcmwpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2h0bWwtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9sb2dvL2xvZ28uc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvbWFpbi9zdGFyLnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIi4vYXNzZXRzL3RydXN0ZWQvcnVuLWd1bS5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfM19fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy90cnVzdGVkL3J1bi1ndW0tbmFtZS5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfNF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy90cnVzdGVkL2JlYXJkLWJyYW5kLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF81X19fID0gbmV3IFVSTChcIi4vYXNzZXRzL3RydXN0ZWQvYmVhci1icmFuZC1uYW1lLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF82X19fID0gbmV3IFVSTChcIi4vYXNzZXRzL3RydXN0ZWQvcHJvbWl4LnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF83X19fID0gbmV3IFVSTChcIi4vYXNzZXRzL3RydXN0ZWQvcHJvbWl4LW5hbWUucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzhfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvdHJ1c3RlZC9zY290Y2gtcG9ydGVyLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF85X19fID0gbmV3IFVSTChcIi4vYXNzZXRzL3RydXN0ZWQvc2NvdGNoLXBvcnRlci1uYW1lLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9zdGF0aXN0aWMvc3RhdGlzdGljLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMV9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9yZXdpZXdzL29idmkucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzEyX19fID0gbmV3IFVSTChcIi4vYXNzZXRzL3Jld2lld3Mvb3ZlcmxhbmRlci5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMTNfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvcmV3aWV3cy9wYXJhZ29uLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9zZXJ2aWNlcy9zaG9waWZ5LnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNV9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9zZXJ2aWNlcy9hdXRvcGlsb3QucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzE2X19fID0gbmV3IFVSTChcIi4vYXNzZXRzL3NlcnZpY2VzL3JlYWwtdGltZS5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMTdfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvc2VydmljZXMvaGFuZHdyaXR0ZW4gY2FyZC5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMThfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvc2VydmljZXMvcHJlZGljdGFibGUgcHJpY2luZy5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMTlfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvc2VydmljZXMvY29tcGxpbWVudGFyeSBjb25jaWVyZ2Ugc2VydmljZS5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjBfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvc3RlcHBlci9saW5lLnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMV9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9wb3N0LXBpbG90cy9oZWxlbi5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjJfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvcG9zdC1waWxvdHMvdHdpdHRlci5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjNfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvcG9zdC1waWxvdHMvbmF0aGFuLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy9wb3N0LXBpbG90cy9jaHJpcy5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjVfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvdHJ5LWZyZWUvc3Rhci13aGl0ZS5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjZfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvdHJ5LWZyZWUvcG9zdGNhcmQucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzI3X19fID0gbmV3IFVSTChcIi4vYXNzZXRzL3RyZW5kcy90cmVuZC0xLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOF9fXyA9IG5ldyBVUkwoXCIuL2Fzc2V0cy90cmVuZHMvdHJlbmQtMi5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMjlfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvdHJlbmRzL3RyZW5kLTMucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fSFRNTF9MT0FERVJfSU1QT1JUXzMwX19fID0gbmV3IFVSTChcIi4vYXNzZXRzL2Zvb3Rlci9lY28tbG9nby5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19IVE1MX0xPQURFUl9JTVBPUlRfMzFfX18gPSBuZXcgVVJMKFwiLi9hc3NldHMvZm9vdGVyL21haWwucG5nXCIsIGltcG9ydC5tZXRhLnVybCk7XG4vLyBNb2R1bGVcbnZhciBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8wX19fID0gX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyhfX19IVE1MX0xPQURFUl9JTVBPUlRfMF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18oX19fSFRNTF9MT0FERVJfSU1QT1JUXzFfX18pO1xudmFyIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yX19fKTtcbnZhciBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zX19fID0gX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyhfX19IVE1MX0xPQURFUl9JTVBPUlRfM19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNF9fXyA9IF9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18oX19fSFRNTF9MT0FERVJfSU1QT1JUXzRfX18pO1xudmFyIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF81X19fKTtcbnZhciBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF82X19fID0gX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyhfX19IVE1MX0xPQURFUl9JTVBPUlRfNl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfN19fXyA9IF9fX0hUTUxfTE9BREVSX0dFVF9TT1VSQ0VfRlJPTV9JTVBPUlRfX18oX19fSFRNTF9MT0FERVJfSU1QT1JUXzdfX18pO1xudmFyIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzhfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF84X19fKTtcbnZhciBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF85X19fID0gX19fSFRNTF9MT0FERVJfR0VUX1NPVVJDRV9GUk9NX0lNUE9SVF9fXyhfX19IVE1MX0xPQURFUl9JTVBPUlRfOV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTNfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xM19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTRfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTZfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTdfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xN19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMThfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xOF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTlfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8xOV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjJfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjNfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yM19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjRfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjVfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjZfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNl9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjdfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yN19fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjhfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjlfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOV9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzBfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zMF9fXyk7XG52YXIgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzFfX18gPSBfX19IVE1MX0xPQURFUl9HRVRfU09VUkNFX0ZST01fSU1QT1JUX19fKF9fX0hUTUxfTE9BREVSX0lNUE9SVF8zMV9fXyk7XG52YXIgY29kZSA9IFwiPCFET0NUWVBFIGh0bWw+IDxodG1sIGxhbmc9XFxcImVuXFxcIj4gPGhlYWQ+IDxtZXRhIGNoYXJzZXQ9XFxcIlVURi04XFxcIj4gPG1ldGEgbmFtZT1cXFwidmlld3BvcnRcXFwiIGNvbnRlbnQ9XFxcIndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTFcXFwiPiA8dGl0bGU+UG9zdCBQaWxvdDwvdGl0bGU+IDxsaW5rIHJlbD1cXFwic3R5bGVzaGVldFxcXCIgaHJlZj1cXFwiLy9jZG4uanNkZWxpdnIubmV0L25wbS9zbGljay1jYXJvdXNlbEAxLjguMS9zbGljay9zbGljay5jc3NcXFwiLz4gPGxpbmsgcmVsPVxcXCJzdHlsZXNoZWV0XFxcIiBocmVmPVxcXCIvL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3NsaWNrLWNhcm91c2VsQDEuOC4xL3NsaWNrL3NsaWNrLXRoZW1lLmNzc1xcXCIvPiA8L2hlYWQ+IDxib2R5PiA8aGVhZGVyIGNsYXNzPVxcXCJoZWFkZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXJcXFwiPiA8YSBjbGFzcz1cXFwibG9nb1xcXCIgaHJlZj1cXFwiI1xcXCI+IDxpbWcgY2xhc3M9XFxcImxvZ29fX2ltYWdlXFxcIiBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMF9fXyArIFwiXFxcIiBhbHQ9XFxcImxvZ29cXFwiPiA8L2E+IDxuYXYgY2xhc3M9XFxcIm5hdlxcXCI+IDxhIGNsYXNzPVxcXCJuYXZfX25pbmtcXFwiIGhyZWY9XFxcIiNcXFwiPlJlc291cmNlczwvYT4gPGEgY2xhc3M9XFxcIm5hdl9fbmlua1xcXCIgaHJlZj1cXFwiI1xcXCI+U3VjY2VzcyBzdG9yaWVzPC9hPiA8YSBjbGFzcz1cXFwibmF2X19uaW5rXFxcIiBocmVmPVxcXCIjXFxcIj5Db21wYW55PC9hPiA8YSBjbGFzcz1cXFwibmF2X19uaW5rXFxcIiBocmVmPVxcXCIjXFxcIj5QcmljaW5nPC9hPiA8L25hdj4gPGRpdiBjbGFzcz1cXFwiYnV0dG9uc1xcXCI+IDxidXR0b24gY2xhc3M9XFxcImJ1dHRvblxcXCI+TG9naW48L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnV0dG9uIGJ1dHRvbi0tb3JhbmdlXFxcIj5DcmVhdGUgZnJlZSBhY2NvdW50PC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9oZWFkZXI+IDxzZWN0aW9uIGNsYXNzPVxcXCJtYWluXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyXFxcIj4gPGgyIGNsYXNzPVxcXCJtYWluX190aXRsZVxcXCI+TWVldCB5b3VyPC9oMj4gPGgyIGNsYXNzPVxcXCJtYWluX190aXRsZVxcXCI+PHNwYW4gY2xhc3M9XFxcImN1cnNpdmVcXFwiPmZhdm9yaXRlPC9zcGFuPiBuZXcgKG9sZCk8L2gyPiA8aDIgY2xhc3M9XFxcIm1haW5fX3RpdGxlXFxcIj5tYXJrZXRpbmcgY2hhbm5lbC48L2gyPiA8cCBjbGFzcz1cXFwibWFpbl9fc3VidGl0bGVcXFwiPiBSZW1hcmthYmxlIHJlc3VsdHMuIEVhc2llciB0aGFuIGVtYWlsLiBQb3N0Y2FyZCBtYXJrZXRpbmcgcmVpbnZlbnRlZCBmb3IgbW9kZXJuIGVjb21tZXJjZS4gPC9wPiA8ZGl2IGNsYXNzPVxcXCJhZGQtaW5mb1xcXCI+IDxidXR0b24gY2xhc3M9XFxcImJ1dHRvbiBidXR0b24tLW9yYW5nZSBidXR0b24tLWxhcmdlXFxcIj4gVHJ5IGl0IFJpc2stZnJlZSA8L2J1dHRvbj4gPGRpdiBjbGFzcz1cXFwicmF0aW5nXFxcIj4gPGRpdiBjbGFzcz1cXFwicmF0aW5nX19zdGFyc1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzFfX18gKyBcIlxcXCIgYWx0PVxcXCJzdGFyXFxcIiBjbGFzcz1cXFwicmF0aW5nX19zdGFyc19faXRlbVxcXCIvPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xX19fICsgXCJcXFwiIGFsdD1cXFwic3RhclxcXCIgY2xhc3M9XFxcInJhdGluZ19fc3RhcnNfX2l0ZW1cXFwiLz4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMV9fXyArIFwiXFxcIiBhbHQ9XFxcInN0YXJcXFwiIGNsYXNzPVxcXCJyYXRpbmdfX3N0YXJzX19pdGVtXFxcIi8+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzFfX18gKyBcIlxcXCIgYWx0PVxcXCJzdGFyXFxcIiBjbGFzcz1cXFwicmF0aW5nX19zdGFyc19faXRlbVxcXCIvPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xX19fICsgXCJcXFwiIGFsdD1cXFwic3RhclxcXCIgY2xhc3M9XFxcInJhdGluZ19fc3RhcnNfX2l0ZW1cXFwiLz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInJhdGluZ19faW5mb1xcXCI+IDUuMCBTaG9waWZ5IFJhdGluZyA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9zZWN0aW9uPiA8c2VjdGlvbiBjbGFzcz1cXFwidHJ1c3RlZFxcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+IDxoMiBjbGFzcz1cXFwic2VjdGlvbi1uYW1lXFxcIj4gVHJ1c3RlZCBieSB0aG91c2FuZHMgPC9oMj4gPGgyIGNsYXNzPVxcXCJzZWN0aW9uLW5hbWVcXFwiPiBvZiB0b3AgRFRDIDxzcGFuIGNsYXNzPVxcXCJjdXJzaXZlXFxcIj5icmFuZHMuPC9zcGFuPiA8L2gyPiA8ZGl2IGNsYXNzPVxcXCJicmFuZHNcXFwiPiA8ZGl2IGNsYXNzPVxcXCJicmFuZHNfX2l0ZW1cXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yX19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIiBjbGFzcz1cXFwiYnJhbmRzX19pdGVtX19pbWdcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zX19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIiBjbGFzcz1cXFwiYnJhbmRzX19pdGVtX19uYW1lXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19faXRlbVxcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzRfX18gKyBcIlxcXCIgYWx0PVxcXCJcXFwiIGNsYXNzPVxcXCJicmFuZHNfX2l0ZW1fX2ltZ1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzVfX18gKyBcIlxcXCIgYWx0PVxcXCJcXFwiIGNsYXNzPVxcXCJicmFuZHNfX2l0ZW1fX25hbWVcXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiYnJhbmRzX19pdGVtXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfNl9fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCIgY2xhc3M9XFxcImJyYW5kc19faXRlbV9faW1nXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfN19fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCIgY2xhc3M9XFxcImJyYW5kc19faXRlbV9fbmFtZVxcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJicmFuZHNfX2l0ZW1cXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF84X19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIiBjbGFzcz1cXFwiYnJhbmRzX19pdGVtX19pbWdcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF85X19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIiBjbGFzcz1cXFwiYnJhbmRzX19pdGVtX19uYW1lXFxcIj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9zZWN0aW9uPiA8c2VjdGlvbiBjbGFzcz1cXFwic3RhdGlzdGljXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyXFxcIj4gPGgyIGNsYXNzPVxcXCJzZWN0aW9uLW5hbWVcXFwiPiBXaHkgdXNlIGRpcmVjdCBtYWlsPyA8L2gyPiA8aDIgY2xhc3M9XFxcInNlY3Rpb24tbmFtZVxcXCI+IEl0IDxzcGFuIGNsYXNzPVxcXCJjdXJzaXZlXFxcIj53b3Jrczwvc3Bhbj4gbGlrZSBjcmF6eS4gPC9oMj4gPGRpdiBjbGFzcz1cXFwiaW5mb1xcXCI+IDxkaXYgY2xhc3M9XFxcImluZm9fX2l0ZW1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJpbmZvX19pdGVtX190aXRsZVxcXCI+MjhYPC9kaXY+IDxkaXYgY2xhc3M9XFxcImluZm9fX2l0ZW1fX2Rlc2NyaXB0aW9uXFxcIj4gSGlnaGVyIHJlc3BvbnNlIHJhdGUgdGhhbiBlbWFpbCAmIGRpZ2l0YWwgPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJpbmZvX19pdGVtXFxcIj4gPGRpdiBjbGFzcz1cXFwiaW5mb19faXRlbV9fdGl0bGVcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xMF9fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJpbmZvX19pdGVtX19kZXNjcmlwdGlvblxcXCI+IEhpZ2hlciByZXNwb25zZSByYXRlIHRoYW4gZW1haWwgJiBkaWdpdGFsIDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiaW5mb19faXRlbVxcXCI+IDxkaXYgY2xhc3M9XFxcImluZm9fX2l0ZW1fX3RpdGxlXFxcIj4xNyBEYXlzPC9kaXY+IDxkaXYgY2xhc3M9XFxcImluZm9fX2l0ZW1fX2Rlc2NyaXB0aW9uXFxcIj4gTGlmZXNwYW4gb2YgYSBwb3N0Y2FyZCB2cy4gc2Vjb25kcyBmb3IgZW1haWwgb3IgU01TIDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L3NlY3Rpb24+IDxzZWN0aW9uIGNsYXNzPVxcXCJyZXZpZXdcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXJcXFwiPiA8aDIgY2xhc3M9XFxcInNlY3Rpb24tbmFtZVxcXCI+IFBvc3RQaWxvdCBtYWtlcyBpdCBhIDxzcGFuIGNsYXNzPVxcXCJjdXJzaXZlXFxcIj5jaW5jaDwvc3Bhbj4gdG8gc2VuZCBwZXJzb25hbGl6ZWQsIHByb2ZpdC1nZW5lcmF0aW5nIHBvc3RjYXJkcy4gPC9oMj4gPGRpdiBjbGFzcz1cXFwicmV2aWV3X19pdGVtXFxcIj4gPGgzIGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX25hbWVcXFwiPiA8c3BhbiBjbGFzcz1cXFwiY3Vyc2l2ZVxcXCI+UG93ZXJmdWw8L3NwYW4+IDwvaDM+IDxoMyBjbGFzcz1cXFwicmV2aWV3X19pdGVtX19uYW1lXFxcIj4gYWNxdWlzaXRpb24gPC9oMz4gPGgzIGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX25hbWVcXFwiPiAmIHJldGVudGlvbiA8L2gzPiA8ZGl2IGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX2Rlc2NyXFxcIj4gU2VuZCBvbmUtb2ZmIG9yIHRyaWdnZXJlZCBjYW1wYWlnbnMgdG8gY3VzdG9tZXJzICYgcHJvc3BlY3RzLiBUYXJnZXQgZW1haWwgbGVhZHMgd2l0aCBNYWlsTWF0Y2jihKIuIDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX3Jldmlld1xcXCI+IDxkaXYgY2xhc3M9XFxcInJldmlld19faXRlbV9fcmV2aWV3X19jb250ZW50XFxcIj4gSXTigJlzIGxpa2UgS2xhdml5byBmb3IgZGlyZWN0IG1haWwuIFRoZSByZXN1bHRzIGFyZSBhYnNvbHV0ZWx5IGluc2FuZS4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInJldmlld19faXRlbV9fcmV2aWV3X19hdXRob3JcXFwiPiBBc2ggTWVsd2FuaSwgQ01PIDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX3Jldmlld19fbG9nb1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzExX19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicmV2aWV3X19pdGVtXFxcIj4gPGgzIGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX25hbWVcXFwiPiA8c3BhbiBjbGFzcz1cXFwiY3Vyc2l2ZVxcXCI+RmlnaHQgYmFjazwvc3Bhbj4gYWdhaW5zdCBpT1MgdXBkYXRlcywgamFja2VkLXVwIENQQ3MgJiBzcGFtIGZvbGRlcnMgPC9oMz4gPGRpdiBjbGFzcz1cXFwicmV2aWV3X19pdGVtX19kZXNjclxcXCI+IERlbGl2ZXIgeW91ciBtZXNzYWdlIHRvIGFsbCBvZiB5b3VyIGN1c3RvbWVycyDigJQgZm9yIGxlc3MgdGhhbiB0aGUgY29zdCBvZiBhIGNsaWNrLiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicmV2aWV3X19pdGVtX19yZXZpZXdcXFwiPiA8ZGl2IGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX3Jldmlld19fY29udGVudFxcXCI+IFBvc3RQaWxvdCBpcyBvdXIgbmV3IHdlYXBvbiBhZ2FpbnN0IHNpbmtpbmcgZW1haWwgZW5nYWdlbWVudCBhbmQgcmlzaW5nIFBQQyBjb3N0cy4gVGhlIHJlc3VsdHMgYW5kIFJPSSBoYXZlIGJlZW4gb3V0c3RhbmRpbmcuIEl04oCZcyBub3cgb25lIG9mIG91ciBjb3JlIG1hcmtldGluZyBjaGFubmVscyB0byBpbmNyZWFzZSBhY3F1aXNpdGlvbiAmIExUVi4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInJldmlld19faXRlbV9fcmV2aWV3X19hdXRob3JcXFwiPiBMZWFoIEtlaXRoLCBHTSA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicmV2aWV3X19pdGVtX19yZXZpZXdfX2xvZ29cXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8xMl9fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCI+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInJldmlld19faXRlbVxcXCI+IDxoMyBjbGFzcz1cXFwicmV2aWV3X19pdGVtX19uYW1lXFxcIj4gRG9uZSBmb3IgPHNwYW4gY2xhc3M9XFxcImN1cnNpdmVcXFwiPnlvdTwvc3Bhbj4gPC9oMz4gIDxkaXYgY2xhc3M9XFxcInJldmlld19faXRlbV9fZGVzY3JcXFwiPiBGcm9tIGRlc2lnbiAmIHN0cmF0ZWd5IHRvIHN0YW1wLWxpY2tpbmcsIG91ciBlY29tIGV4cGVydHMgaGVscCB5b3UgZXZlcnkgc3RlcCBvZiB0aGUgd2F5LiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicmV2aWV3X19pdGVtX19yZXZpZXdcXFwiPiA8ZGl2IGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX3Jldmlld19fY29udGVudFxcXCI+IFRoZSB0ZWFtIGlzIHNvIGtub3dsZWRnZWFibGUgYW5kIGJleW9uZCBoZWxwZnVsLiBJ4oCZbSBibG93biBhd2F5IGJ5IHRoZWlyIGNvbW11bmljYXRpb24sIGRldGFpbCwgYW5kIGF0dGVudGl2ZW5lc3MgYW5kIGFsd2F5cyBmZWVsIGxpa2UgdGhleSBoYXZlIG91ciBiZXN0IGludGVyZXN0IGluIG1pbmQuIERlZmluaXRlbHkgd29ydGggYSB0cnkuIDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJyZXZpZXdfX2l0ZW1fX3Jldmlld19fYXV0aG9yXFxcIj4gSG9sbHkgRGF2aWVzLCBNYXJrZXRpbmcgRGlyZWN0b3IgPC9kaXY+IDxkaXYgY2xhc3M9XFxcInJldmlld19faXRlbV9fcmV2aWV3X19sb2dvXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMTNfX18gKyBcIlxcXCIgYWx0PVxcXCJcXFwiPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJidXR0b24gYnV0dG9uLS1sYXJnZSBidXR0b24tLW9yYW5nZVxcXCI+IFRyeSBpdCBSSVNLLWZyZWUgPC9idXR0b24+IDwvZGl2PiA8L3NlY3Rpb24+IDxzZWN0aW9uIGNsYXNzPVxcXCJzZXJ2aWNlc1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+IDxoMiBjbGFzcz1cXFwic2VjdGlvbi1uYW1lXFxcIj4gRXZlcnl0aGluZyB5b3VyIGJyYW5kIG5lZWRzIHRvIDwvaDI+IDxoMiBjbGFzcz1cXFwic2VjdGlvbi1uYW1lXFxcIj4gPHNwYW4gY2xhc3M9XFxcImN1cnNpdmVcXFwiPiBtYWtlIHlvdXIgYnJhbmQgdW5mb3JnZXR0YWJsZSA8L3NwYW4+IDwvaDI+IDxkaXYgY2xhc3M9XFxcImJyYW5kc1xcXCI+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZFxcXCI+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbG9nb1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE0X19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbmFtZVxcXCI+IFBsdWctYW5kLXBsYXkgd2l0aCB5b3VyIHN0YWNrIDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJicmFuZHNfX2NhcmRfX2Rlc2NyXFxcIj4gTmF0aXZlIGludGVncmF0aW9ucyBwcm92aWRlIHNlYW1sZXNzIHNlZ21lbnRhdGlvbiwgYXV0b21hdGlvbiAmIHRyYWNraW5nLiBObyBjbHVua3kgc3ByZWFkc2hlZXRzLiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZFxcXCI+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbG9nb1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE1X19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbmFtZVxcXCI+IFJ1biBjYW1wYWlnbnMgb24gYXV0b3BpbG90IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJicmFuZHNfX2NhcmRfX2Rlc2NyXFxcIj4gSW5rIHByb2ZpdHMgd2hpbGUgeW91IHNsZWVwOiBKdXN0IHNldCBpdCBhbmQgZm9yZ2V0IGl0LiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZFxcXCI+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbG9nb1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE2X19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbmFtZVxcXCI+IFJlYWwtdGltZSBST0kgZGFzaGJvYXJkIDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJicmFuZHNfX2NhcmRfX2Rlc2NyXFxcIj4gVHJhY2sgcGVyZm9ybWFuY2Ugb2YgZXZlcnkgcG9zdGNhcmQgYnkgY3VzdG9tZXIgb3IgZGlzY291bnQgY29kZS4gWW91ciBDRk8gd2lsbCBsb3ZlIGl0LiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZFxcXCI+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbG9nb1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE3X19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbmFtZVxcXCI+IERlbGl2ZXIgV09XIHdpdGggKnJlYWwqIGhhbmR3cml0dGVuIGNhcmRzIDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJicmFuZHNfX2NhcmRfX2Rlc2NyXFxcIj4gT3VyIHByb3ByaWV0YXJ5IHJvYm90cyB1c2UgcmVhbCBwZW5zIGFuZCBpbmsgZm9yIGFuIHVuZm9yZ2V0dGFibGUgVklQIHRvdWNoLiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZFxcXCI+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbG9nb1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE4X19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbmFtZVxcXCI+IFByZWRpY3RhYmxlIHByaWNpbmcgPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fZGVzY3JcXFwiPiBVbmxpa2UgQ1BDcywgcG9zdGFnZSByYXRlcyBkb27igJl0IGNoYW5nZSBiYXNlZCBvbiBjb21wZXRpdGlvbiBvciB3aG8geW914oCZcmUgdGFyZ2V0aW5nLiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZFxcXCI+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbG9nb1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzE5X19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fbmFtZVxcXCI+IENvbXBsaW1lbnRhcnkgY29uY2llcmdlIHNlcnZpY2UgPC9kaXY+IDxkaXYgY2xhc3M9XFxcImJyYW5kc19fY2FyZF9fZGVzY3JcXFwiPiBEVEMgaXMgaW4gb3VyIEROQS4gT3VyIHByb3Mgd2lsbCBidWlsZCB5b3VyIHN0cmF0ZWd5IGFuZCBjdXN0b20gZGVzaWducyB1c2luZyBiYXR0bGUtdGVzdGVkIGJlc3QgcHJhY3RpY2VzLiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9zZWN0aW9uPiA8c2VjdGlvbiBjbGFzcz1cXFwiYWN0aW9uc1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+IDxoMiBjbGFzcz1cXFwic2VjdGlvbi1uYW1lXFxcIj4gRmFzdCBsYXVuY2guIEZhc3QgcmVzdWx0cy4gPC9oMj4gPGgyIGNsYXNzPVxcXCJzZWN0aW9uLW5hbWVcXFwiPiA8c3BhbiBjbGFzcz1cXFwiY3Vyc2l2ZVxcXCI+IEhlcmUncyBob3cuIDwvc3Bhbj4gPC9oMj4gPGRpdiBjbGFzcz1cXFwic3RlcHBlclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW0gc3RlcHBlcl9faXRlbS0tYWN0aXZlXFxcIj4gPGRpdiBjbGFzcz1cXFwic3RlcHBlcl9faXRlbV9fdGl0bGVcXFwiIGRhdGEtdGFyZ2V0PVxcXCJmaXJzdFxcXCI+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX3RpdGxlX19udW1iZXIgY3Vyc2l2ZVxcXCI+MDE8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3RlcHBlcl9faXRlbV9fdGl0bGVfX25hbWVcXFwiPlNlZ21lbnQ8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX2NvbnRlbnRcXFwiIGlkPVxcXCJmaXJzdFxcXCI+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX2NvbnRlbnRfX2xpbmVcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yMF9fXyArIFwiXFxcIiBhbHQ9XFxcImxpbmVcXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3RlcHBlcl9faXRlbV9fY29udGVudF9fdGV4dFxcXCI+IExvcmVtIGlwc3VtIGRvbG9yIHNpdCwgYW1ldCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBDdW0gYXNwZXJpb3JlcyBlbmltIG1vbGxpdGlhIGVpdXMgc29sdXRhIG5vYmlzLiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtXFxcIj4gPGRpdiBjbGFzcz1cXFwic3RlcHBlcl9faXRlbV9fdGl0bGVcXFwiIGRhdGEtdGFyZ2V0PVxcXCJzZWNvbmRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtX190aXRsZV9fbnVtYmVyIGN1cnNpdmVcXFwiPjAyPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX3RpdGxlX19uYW1lXFxcIj5EZXNpZ248L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX2NvbnRlbnRcXFwiIGlkPVxcXCJzZWNvbmRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtX19jb250ZW50X19saW5lXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjBfX18gKyBcIlxcXCIgYWx0PVxcXCJsaW5lXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX2NvbnRlbnRfX3RleHRcXFwiPiBMb3JlbSBpcHN1bSBkb2xvciBzaXQsIGFtZXQgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gQ3VtIGFzcGVyaW9yZXMgZW5pbSBtb2xsaXRpYSBlaXVzIHNvbHV0YSBub2Jpcy4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3RlcHBlcl9faXRlbVxcXCI+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX3RpdGxlXFxcIiBkYXRhLXRhcmdldD1cXFwidGhpcmRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtX190aXRsZV9fbnVtYmVyIGN1cnNpdmVcXFwiPjAzPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX3RpdGxlX19uYW1lXFxcIj5TZWdtZW50PC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtX19jb250ZW50XFxcIiBpZD1cXFwidGhpcmRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtX19jb250ZW50X19saW5lXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjBfX18gKyBcIlxcXCIgYWx0PVxcXCJsaW5lXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX2NvbnRlbnRfX3RleHRcXFwiPiBPbmUtb2ZmIGFubm91bmNlbWVudHMgb3IgYXV0b21hdGljYWxseSB0cmlnZ2VyZWQgZmxvd3MuIEN1c3RvbWVycyByZWNlaXZlIHRoZWlyIHBlcnNvbmFsaXplZCBjYXJkcyB3aXRoaW4gYSB3ZWVrLiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtXFxcIj4gPGRpdiBjbGFzcz1cXFwic3RlcHBlcl9faXRlbV9fdGl0bGVcXFwiIGRhdGEtdGFyZ2V0PVxcXCJmb3VydGhcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtX190aXRsZV9fbnVtYmVyIGN1cnNpdmVcXFwiPjA0PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0ZXBwZXJfX2l0ZW1fX3RpdGxlX19uYW1lXFxcIj5Db252ZXJ0PC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtX19jb250ZW50XFxcIiBpZD1cXFwiZm91cnRoXFxcIj4gPGRpdiBjbGFzcz1cXFwic3RlcHBlcl9faXRlbV9fY29udGVudF9fbGluZVxcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzIwX19fICsgXCJcXFwiIGFsdD1cXFwibGluZVxcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGVwcGVyX19pdGVtX19jb250ZW50X190ZXh0XFxcIj4gTG9yZW0gaXBzdW0gZG9sb3Igc2l0LCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEN1bSBhc3BlcmlvcmVzIGVuaW0gbW9sbGl0aWEgZWl1cyBzb2x1dGEgbm9iaXMuIDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9zZWN0aW9uPiA8c2VjdGlvbiBjbGFzcz1cXFwicG9zdC1waWxvdFxcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lclxcXCI+IDxoMiBjbGFzcz1cXFwic2VjdGlvbi1uYW1lXFxcIj4gUG9zdFBpbG90IGlzIPCflKUgZm9yIDxzcGFuIGNsYXNzPVxcXCJjdXJzaXZlXFxcIj5EVEM8L3NwYW4+IDwvaDI+IDxkaXYgY2xhc3M9XFxcInNsaWRlclxcXCIgYXJpYS1sYWJlbGxlZGJ5PVxcXCJjYXJvdXNlbC1oZWFkaW5nXFxcIj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtXFxcIj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25cXFwiPiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1fX3BlcnNvbl9fcGhvdG9cXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yMV9fXyArIFwiXFxcIiBhbHQ9XFxcInBob3RvXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uX19pbmZvXFxcIj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25fX2luZm9fX25hbWVcXFwiPiBIZWxlbiBHdW8gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uX19pbmZvX19saW5rXFxcIj4gQEhlbGVuR3VvXyA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uX19zb2NpYWxcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yMl9fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCI+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19jb250ZW50XFxcIj4gQmVlbiB1c2luZyA8c3BhbiBjbGFzcz1cXFwiYm9sZFxcXCI+UG9zdFBpbG90PC9zcGFuPiBmb3IgeWVhcnMuIEdvb2QgZm9yIHJlLWVuZ2FnZW1lbnQuIEFuZCB5b3UgY2FuIGdldCBjcmVhdGl2ZSB3aXRoIHlvdXIgbWVzc2FnaW5nLiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbVxcXCI+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uXFxcIj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25fX3Bob3RvXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjNfX18gKyBcIlxcXCIgYWx0PVxcXCJwaG90b1xcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1fX3BlcnNvbl9faW5mb1xcXCI+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uX19pbmZvX19uYW1lXFxcIj4gTmF0aGFuIFdvb2RzIDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1fX3BlcnNvbl9faW5mb19fbGlua1xcXCI+IEBIZWlzTmF0aGFuIDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25fX3NvY2lhbFxcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzIyX19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1fX2NvbnRlbnRcXFwiPiBXZSBoYXZlIGRvbmUgc29tZSByYWQgd2luYmFja3MgdG8gMzYwLTcyMCBkYXlzIHNpbmNlIHB1cmNoYXNlIHRoYXQgaGF2ZSByb2NrZWQuIDxzcGFuIGNsYXNzPVxcXCJib2xkXFxcIj5Qb3N0UGlsb3Q8L3NwYW4+IHRlYW0gaXMgb25lIG9mIG15IGZhdnMuIDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtXFxcIj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25cXFwiPiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1fX3BlcnNvbl9fcGhvdG9cXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yNF9fXyArIFwiXFxcIiBhbHQ9XFxcInBob3RvXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uX19pbmZvXFxcIj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25fX2luZm9fX25hbWVcXFwiPiBDaHJpcyBMYW5kZXIgPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uX19pbmZvX19saW5rXFxcIj4gQGNocmlzX2Jhc2lzIDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25fX3NvY2lhbFxcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzIyX19fICsgXCJcXFwiIGFsdD1cXFwiXFxcIj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1fX2NvbnRlbnRcXFwiPiBBbm90aGVyICsxIGZvciA8c3BhbiBjbGFzcz1cXFwiYm9sZFxcXCI+UG9zdFBpbG90PC9zcGFuPi4gSGF2ZSBvbmx5IGRvbmUgd2luYmFja3MsIGJ1dCBpdCdzIGJlZW4gd29uZGVyZnVsLiBUaGVpciB0ZWFtIGlzIGFsc28gdG9wIG5vdGNoLiBTdXBlciBoZWxwZnVsIGV2ZXJ5IHRpbWUgd2Ugc2V0IHNvbWV0aGluZyB1cC4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1fX3BlcnNvblxcXCI+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uX19waG90b1xcXCI+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzIzX19fICsgXCJcXFwiIGFsdD1cXFwicGhvdG9cXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25fX2luZm9cXFwiPiA8ZGl2IGNsYXNzPVxcXCJzbGlkZXJfX2l0ZW1fX3BlcnNvbl9faW5mb19fbmFtZVxcXCI+IE5hdGhhbiBXb29kcyA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19wZXJzb25fX2luZm9fX2xpbmtcXFwiPiBASGVpc05hdGhhbiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNsaWRlcl9faXRlbV9fcGVyc29uX19zb2NpYWxcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yMl9fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCI+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2xpZGVyX19pdGVtX19jb250ZW50XFxcIj4gRW1haWwgaXMgYSBraWxsZXIgY2hhbm5lbCwgYnV0IGlmIHlvdSBsYXllciBpbiBwb3N0YWwgbWFpbCB5b3UgY2FuIHJlYWxseSBzdXBlcmNoYXJnZSByZXN1bHRzLiBUaGUgdGVhbSBhdCA8c3BhbiBjbGFzcz1cXFwiYm9sZFxcXCI+QGdldHBvc3RwaWxvdDwvc3Bhbj4gd2lsbCBzcGFyayBpZGVhcyBmb3IgeWEuIDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxidXR0b24gY2xhc3M9XFxcImJ1dHRvbiBidXR0b24tLWxhcmdlIGJ1dHRvbi0tb3JhbmdlXFxcIj4gVHJ5IGl0IFJJU0stZnJlZSA8L2J1dHRvbj4gPC9kaXY+IDwvc2VjdGlvbj4gPHNlY3Rpb24gY2xhc3M9XFxcInRyeS1mcmVlXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGVudFxcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRlbnRfX3RpdGxlXFxcIj4gVHJ5IFBvc3RQaWxvdCBSaXNrLUZyZWUgPC9kaXY+IDxkaXYgY2xhc3M9XFxcImNvbnRlbnRfX2Rlc2NyaXB0aW9uXFxcIj4gTm8gY29udHJhY3RzLiBObyBjb21taXRtZW50cy4gR3VhcmFudGVlZCByZXN1bHRzLiogPC9kaXY+IDxkaXYgY2xhc3M9XFxcImFkZC1pbmZvXFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnV0dG9uIGJ1dHRvbi0tbGFyZ2VcXFwiPiBUcnkgaXQgUmlzay1mcmVlIDwvYnV0dG9uPiA8ZGl2IGNsYXNzPVxcXCJyYXRpbmdcXFwiPiA8ZGl2IGNsYXNzPVxcXCJyYXRpbmdfX3N0YXJzXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjVfX18gKyBcIlxcXCIgYWx0PVxcXCJzdGFyXFxcIiBjbGFzcz1cXFwicmF0aW5nX19zdGFyc19faXRlbVxcXCIvPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yNV9fXyArIFwiXFxcIiBhbHQ9XFxcInN0YXJcXFwiIGNsYXNzPVxcXCJyYXRpbmdfX3N0YXJzX19pdGVtXFxcIi8+IDxpbWcgc3JjPVxcXCJcIiArIF9fX0hUTUxfTE9BREVSX1JFUExBQ0VNRU5UXzI1X19fICsgXCJcXFwiIGFsdD1cXFwic3RhclxcXCIgY2xhc3M9XFxcInJhdGluZ19fc3RhcnNfX2l0ZW1cXFwiLz4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjVfX18gKyBcIlxcXCIgYWx0PVxcXCJzdGFyXFxcIiBjbGFzcz1cXFwicmF0aW5nX19zdGFyc19faXRlbVxcXCIvPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yNV9fXyArIFwiXFxcIiBhbHQ9XFxcInN0YXJcXFwiIGNsYXNzPVxcXCJyYXRpbmdfX3N0YXJzX19pdGVtXFxcIi8+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJyYXRpbmdfX2luZm9cXFwiPiA1LjAgU2hvcGlmeSBSYXRpbmcgPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicmVmZXJlbmNlXFxcIj4gKiBmb3IgcXVhbGlmaWVkIGJyYW5kcyB3aXRoIG92ZXIgJDFtIGFubnVhbCBTaG9waWZ5IHJldmVudWUuIDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiaW1hZ2VcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yNl9fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCI+IDwvZGl2PiA8L2Rpdj4gPC9zZWN0aW9uPiA8c2VjdGlvbiBjbGFzcz1cXFwidHJlbmRzXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyXFxcIj4gPGgyIGNsYXNzPVxcXCJzZWN0aW9uLW5hbWVcXFwiPiBMYXRlc3QgdHJlbmRzICYgPHNwYW4gY2xhc3M9XFxcImN1cnNpdmVcXFwiPmluc2lnaHRzPC9zcGFuPiA8L2gyPiA8ZGl2IGNsYXNzPVxcXCJuZXdzXFxcIj4gPGRpdiBjbGFzcz1cXFwibmV3c19faXRlbVxcXCI+IDxkaXYgY2xhc3M9XFxcIm5ld3NfX2l0ZW1fX2ltYWdlXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjdfX18gKyBcIlxcXCIgYWx0PVxcXCJcXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibmV3c19faXRlbV9fdGl0bGVcXFwiPiAzIExvdy1Db3N0IENhbXBhaWducyBZb3UgTXVzdCBSdW4gdG8gV2luIEJGQ00gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJuZXdzX19pdGVtXFxcIj4gPGRpdiBjbGFzcz1cXFwibmV3c19faXRlbV9faW1hZ2VcXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8yOF9fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJuZXdzX19pdGVtX190aXRsZVxcXCI+IFBvc3RjYXJkIE1hcmtldGluZzogVGhlIERlZmluaXRpdmUgR3VpZGUgdG8gSGlnaCBST0kgWzIwMjJdIDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibmV3c19faXRlbVxcXCI+IDxkaXYgY2xhc3M9XFxcIm5ld3NfX2l0ZW1fX2ltYWdlXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMjlfX18gKyBcIlxcXCIgYWx0PVxcXCJcXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibmV3c19faXRlbV9fdGl0bGVcXFwiPiBUaGUgVWx0aW1hdGUgR3VpZGUgdG8gVGhhbmsgWW91IE5vdGVzIGZvciBFY29tbWVyY2UgPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvc2VjdGlvbj4gPGZvb3RlciBjbGFzcz1cXFwiZm9vdGVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwidXNlZnVsbC1saW5rc1xcXCI+IDxkaXYgY2xhc3M9XFxcInVzZWZ1bGwtbGlua3NfX2NvbFxcXCI+IDxkaXYgY2xhc3M9XFxcImxvZ29cXFwiPiA8aW1nIHNyYz1cXFwiXCIgKyBfX19IVE1MX0xPQURFUl9SRVBMQUNFTUVOVF8zMF9fXyArIFwiXFxcIiBhbHQ9XFxcIlxcXCI+IDwvZGl2PiA8cD4gT3VyIHBhcGVyIGlzIHNvdXJjZWQgZnJvbSBGU0MtY2VydGlmaWVkIG1pbGxzLiBXZSBwbGFudCBlbm91Z2ggdHJlZXMgdG8gbW9yZSB0aGFuIGRvdWJsZSBvdXIgcGFwZXIgdXNhZ2UuIDwvcD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInVzZWZ1bGwtbGlua3NfX2NvbFxcXCI+IDxkaXYgY2xhc3M9XFxcInVzZWZ1bGwtbGlua3NfX2NvbF9fbmFtZVxcXCI+IENvbXBhbnkgPC9kaXY+IDxhIGhyZWY9XFxcIiNcXFwiIGNsYXNzPVxcXCJ1c2VmdWxsLWxpbmtzX19jb2xfX2xpbmtcXFwiPiBBYm91dCB1cyA8L2E+IDxhIGhyZWY9XFxcIiNcXFwiIGNsYXNzPVxcXCJ1c2VmdWxsLWxpbmtzX19jb2xfX2xpbmtcXFwiPiBQYXJ0bmVyIHByb2dyYW0gPC9hPiA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwidXNlZnVsbC1saW5rc19fY29sX19saW5rXFxcIj4gQ2FyZWVyIDwvYT4gPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcInVzZWZ1bGwtbGlua3NfX2NvbF9fbGlua1xcXCI+IENvbnRhY3QgdXMgPC9hPiA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwidXNlZnVsbC1saW5rc19fY29sX19saW5rXFxcIj4gUHJpdmFjeSBQb2xpY3kgPC9hPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwidXNlZnVsbC1saW5rc19fY29sXFxcIj4gPGRpdiBjbGFzcz1cXFwidXNlZnVsbC1saW5rc19fY29sX19uYW1lIGhpZGRlblxcXCI+MDwvZGl2PiA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwidXNlZnVsbC1saW5rc19fY29sX19saW5rXFxcIj4gUHJpY2luZyA8L2E+IDxhIGhyZWY9XFxcIiNcXFwiIGNsYXNzPVxcXCJ1c2VmdWxsLWxpbmtzX19jb2xfX2xpbmtcXFwiPiBSZXZpZXdzIDwvYT4gPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcInVzZWZ1bGwtbGlua3NfX2NvbF9fbGlua1xcXCI+IERpcmVjdCBNYWlsIEFjYWRlbXkgPC9hPiA8YSBocmVmPVxcXCIjXFxcIiBjbGFzcz1cXFwidXNlZnVsbC1saW5rc19fY29sX19saW5rXFxcIj4gU3VjY2VzcyBzdG9yaWVzIDwvYT4gPGEgaHJlZj1cXFwiI1xcXCIgY2xhc3M9XFxcInVzZWZ1bGwtbGlua3NfX2NvbF9fbGlua1xcXCI+IFRlcm1zICYgY29uZGl0aW9ucyA8L2E+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ1c2VmdWxsLWxpbmtzX19jb2xcXFwiPiA8ZGl2IGNsYXNzPVxcXCJ1c2VmdWxsLWxpbmtzX19jb2xfX25hbWVcXFwiPiBDb250YWN0IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ1c2VmdWxsLWxpbmtzX19jb2xfX2VtYWlsXFxcIj4gPGltZyBzcmM9XFxcIlwiICsgX19fSFRNTF9MT0FERVJfUkVQTEFDRU1FTlRfMzFfX18gKyBcIlxcXCIgYWx0PVxcXCJcXFwiPiA8cD5zdXBwb3J0QHBvc3RwaWxvdC5jb208L3A+IDwvZGl2PiA8cD4gUHJpbnRlZCB3aXRoIOKdpO+4j++4j++4jyBhdCBvdXIgZmFjaWxpdHkgaW4gU291dGggQ2Fyb2xpbmEuIDwvcD4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9mb290ZXI+IDwvYm9keT4gPC9odG1sPlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCJpbXBvcnQgXCIuL2luZGV4Lmh0bWxcIjtcbmltcG9ydCBcIi4vaW5kZXguc2Nzc1wiO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCAnc2xpY2stY2Fyb3VzZWwnO1xudmFyIHN0ZXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zdGVwcGVyX19pdGVtXCIpO1xuc3RlcHMuZm9yRWFjaChmdW5jdGlvbiAoaSkge1xuICAgIGkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJzdGVwcGVyX19pdGVtLS1hY3RpdmVcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChqKSB7IHJldHVybiBqLmNsYXNzTGlzdC5yZW1vdmUoXCJzdGVwcGVyX19pdGVtLS1hY3RpdmVcIik7IH0pO1xuICAgICAgICBpLmNsYXNzTGlzdC5hZGQoXCJzdGVwcGVyX19pdGVtLS1hY3RpdmVcIik7XG4gICAgfSk7XG59KTtcbiQoXCIuc2xpZGVyXCIpLnNsaWNrKHtcbiAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgYXJyb3dzOiB0cnVlLFxuICAgIGluZmluaXRlOiB0cnVlLFxuICAgIGF1dG9wbGF5OiB0cnVlLFxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhc2giLCJtYXliZU5lZWRRdW90ZXMiLCJ0ZXN0IiwiY29uY2F0IiwiZ2xvYmFsIiwiZmFjdG9yeSIsImRvY3VtZW50IiwidyIsIkVycm9yIiwid2luZG93IiwidGhpcyIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwiZmxhdCIsImFycmF5IiwiY2FsbCIsImFwcGx5IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwib2JqIiwibm9kZVR5cGUiLCJpdGVtIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJpIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwicmh0bWxTdWZmaXgiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJpc0FycmF5TGlrZSIsImxlbmd0aCIsIm5vZGVOYW1lIiwiZWxlbSIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInByb3RvdHlwZSIsImpxdWVyeSIsImNvbnN0cnVjdG9yIiwidG9BcnJheSIsImdldCIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwibWFwIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwidGV4dENvbnRlbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJub2RlVmFsdWUiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsImlzWE1MRG9jIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiZG9jRWxlbSIsIm93bmVyRG9jdW1lbnQiLCJzZWNvbmQiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJ2YWx1ZSIsImd1aWQiLCJTeW1ib2wiLCJpdGVyYXRvciIsInNwbGl0IiwiX2kiLCJwb3AiLCJ3aGl0ZXNwYWNlIiwicnRyaW1DU1MiLCJSZWdFeHAiLCJjb250YWlucyIsImEiLCJiIiwiYnVwIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwiZXNjYXBlU2VsZWN0b3IiLCJzZWwiLCJwcmVmZXJyZWREb2MiLCJwdXNoTmF0aXZlIiwiRXhwciIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYm9vbGVhbnMiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJsZWFkaW5nQ29tYmluYXRvciIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJmcm9tQ2hhckNvZGUiLCJ1bmxvYWRIYW5kbGVyIiwic2V0RG9jdW1lbnQiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJmaW5kIiwic2VlZCIsIm0iLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidGVzdENvbnRleHQiLCJzY29wZSIsInRva2VuaXplIiwidG9TZWxlY3RvciIsImpvaW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZWxlY3QiLCJrZXlzIiwiY2FjaGUiLCJrZXkiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInN1YldpbmRvdyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjc3NIYXMiLCJxdWVyeVNlbGVjdG9yIiwiZmlsdGVyIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImNsYXNzTmFtZSIsImlucHV0IiwiaW5uZXJIVE1MIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImV4cHIiLCJlbGVtZW50cyIsIm1hdGNoZXNTZWxlY3RvciIsImF0dHIiLCJhdHRySGFuZGxlIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJleHBlY3RlZE5vZGVOYW1lIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0IiwiX2FyZ3VtZW50Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIl9jb250ZXh0IiwieG1sIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJkaWZmIiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm5vdCIsIm1hdGNoZXIiLCJjb21waWxlIiwidW5tYXRjaGVkIiwiaGFzIiwibGFuZyIsImVsZW1MYW5nIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJuZXh0U2libGluZyIsImhlYWRlciIsImJ1dHRvbiIsIl9tYXRjaEluZGV4ZXMiLCJsdCIsImd0IiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJwYXJzZU9ubHkiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsIm1hdGNoZXJPdXQiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsImZpbHRlcnMiLCJ1bmlxdWUiLCJnZXRUZXh0IiwiaXNYTUwiLCJzZWxlY3RvcnMiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwiY3VyIiwidGFyZ2V0cyIsImwiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwib2JqZWN0IiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJsaXN0IiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwiaGFuZGxlciIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwicmVqZWN0V2l0aCIsImdldEVycm9ySG9vayIsImdldFN0YWNrSG9vayIsInNldFRpbWVvdXQiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJwcmltYXJ5IiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwiYXN5bmNFcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInN0YWNrIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsIkpTT04iLCJwYXJzZSIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImF0dHJzIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInVuc2hpZnQiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsInRtcCIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5IiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImhpZGUiLCJ0b2dnbGUiLCJkaXYiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJhdHRhY2hlZCIsImZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImxldmVyYWdlTmF0aXZlIiwiaXNTZXR1cCIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJjcmVhdGUiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0Iiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50IiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiYmx1ciIsImZvY3VzTWFwcGVkSGFuZGxlciIsImRvY3VtZW50TW9kZSIsInNpbXVsYXRlIiwiYXR0YWNoZXMiLCJkYXRhSG9sZGVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwicmN1c3RvbVByb3AiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiaXNDdXN0b21Qcm9wIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJwYXJzZUludCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJtYXJnaW5EZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlU2xpY2UiLCJjb2x1bW5Db3VudCIsImZsZXhHcm93IiwiZmxleFNocmluayIsImdyaWRBcmVhIiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTdGFydCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwib3JpZ05hbWUiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImNsYXNzTmFtZXMiLCJjdXJWYWx1ZSIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInJxdWVyeSIsInBhcnNlWE1MIiwicGFyc2VyRXJyb3JFbGVtIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInRyaWdnZXJIYW5kbGVyIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJydHJpbSIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiaW5zdGFuY2VVaWQiLCJTbGljayIsImVsZW1lbnQiLCJkYXRhU2V0dGluZ3MiLCJkZWZhdWx0cyIsImFjY2Vzc2liaWxpdHkiLCJhZGFwdGl2ZUhlaWdodCIsImFwcGVuZEFycm93cyIsImFwcGVuZERvdHMiLCJhcnJvd3MiLCJhc05hdkZvciIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsImF1dG9wbGF5IiwiYXV0b3BsYXlTcGVlZCIsImNlbnRlck1vZGUiLCJjZW50ZXJQYWRkaW5nIiwiY3NzRWFzZSIsImN1c3RvbVBhZ2luZyIsInNsaWRlciIsImRvdHMiLCJkb3RzQ2xhc3MiLCJkcmFnZ2FibGUiLCJlZGdlRnJpY3Rpb24iLCJmYWRlIiwiZm9jdXNPblNlbGVjdCIsImZvY3VzT25DaGFuZ2UiLCJpbmZpbml0ZSIsImluaXRpYWxTbGlkZSIsImxhenlMb2FkIiwibW9iaWxlRmlyc3QiLCJwYXVzZU9uSG92ZXIiLCJwYXVzZU9uRm9jdXMiLCJwYXVzZU9uRG90c0hvdmVyIiwicmVzcG9uZFRvIiwicmVzcG9uc2l2ZSIsInJvd3MiLCJydGwiLCJzbGlkZSIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3dpcGUiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZUNTUyIsInVzZVRyYW5zZm9ybSIsInZhcmlhYmxlV2lkdGgiLCJ2ZXJ0aWNhbCIsInZlcnRpY2FsU3dpcGluZyIsIndhaXRGb3JBbmltYXRlIiwiaW5pdGlhbHMiLCJhbmltYXRpbmciLCJkcmFnZ2luZyIsImF1dG9QbGF5VGltZXIiLCJjdXJyZW50RGlyZWN0aW9uIiwiY3VycmVudExlZnQiLCJjdXJyZW50U2xpZGUiLCJkaXJlY3Rpb24iLCIkZG90cyIsImxpc3RXaWR0aCIsImxpc3RIZWlnaHQiLCJsb2FkSW5kZXgiLCIkbmV4dEFycm93IiwiJHByZXZBcnJvdyIsInNjcm9sbGluZyIsInNsaWRlQ291bnQiLCJzbGlkZVdpZHRoIiwiJHNsaWRlVHJhY2siLCIkc2xpZGVzIiwic2xpZGluZyIsInNsaWRlT2Zmc2V0Iiwic3dpcGVMZWZ0Iiwic3dpcGluZyIsIiRsaXN0IiwidG91Y2hPYmplY3QiLCJ0cmFuc2Zvcm1zRW5hYmxlZCIsInVuc2xpY2tlZCIsImFjdGl2ZUJyZWFrcG9pbnQiLCJhbmltVHlwZSIsImFuaW1Qcm9wIiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50U2V0dGluZ3MiLCJjc3NUcmFuc2l0aW9ucyIsImZvY3Vzc2VkIiwiaW50ZXJydXB0ZWQiLCJwYXVzZWQiLCJwb3NpdGlvblByb3AiLCJyb3dDb3VudCIsInNob3VsZENsaWNrIiwiJHNsaWRlciIsIiRzbGlkZXNDYWNoZSIsInRyYW5zZm9ybVR5cGUiLCJ0cmFuc2l0aW9uVHlwZSIsInZpc2liaWxpdHlDaGFuZ2UiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd1RpbWVyIiwibW96SGlkZGVuIiwid2Via2l0SGlkZGVuIiwiYXV0b1BsYXkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNoYW5nZVNsaWRlIiwiY2xpY2tIYW5kbGVyIiwic2VsZWN0SGFuZGxlciIsInNldFBvc2l0aW9uIiwic3dpcGVIYW5kbGVyIiwiZHJhZ0hhbmRsZXIiLCJrZXlIYW5kbGVyIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJhZGRTbGlkZSIsInNsaWNrQWRkIiwibWFya3VwIiwiYWRkQmVmb3JlIiwidW5sb2FkIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsInRhcmdldEhlaWdodCIsIm91dGVySGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImFuaW1Qcm9wcyIsImFuaW1TdGFydCIsImFwcGx5VHJhbnNpdGlvbiIsImRpc2FibGVUcmFuc2l0aW9uIiwiZ2V0TmF2VGFyZ2V0Iiwic2xpY2siLCJzbGlkZUhhbmRsZXIiLCJ0cmFuc2l0aW9uIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2xpZGVUbyIsImJ1aWxkQXJyb3dzIiwiYnVpbGREb3RzIiwiZG90IiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsInNldHVwSW5maW5pdGUiLCJ1cGRhdGVEb3RzIiwic2V0U2xpZGVDbGFzc2VzIiwiYnVpbGRSb3dzIiwiYyIsIm5ld1NsaWRlcyIsIm51bU9mU2xpZGVzIiwib3JpZ2luYWxTbGlkZXMiLCJzbGlkZXNQZXJTZWN0aW9uIiwicm93IiwiY2hlY2tSZXNwb25zaXZlIiwiZm9yY2VVcGRhdGUiLCJicmVha3BvaW50IiwidGFyZ2V0QnJlYWtwb2ludCIsInJlc3BvbmRUb1dpZHRoIiwidHJpZ2dlckJyZWFrcG9pbnQiLCJzbGlkZXJXaWR0aCIsImlubmVyV2lkdGgiLCJtaW4iLCJ1bnNsaWNrIiwicmVmcmVzaCIsImRvbnRBbmltYXRlIiwiaW5kZXhPZmZzZXQiLCIkdGFyZ2V0IiwiY2hlY2tOYXZpZ2FibGUiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwiY2xlYW5VcFNsaWRlRXZlbnRzIiwib3JpZW50YXRpb25DaGFuZ2UiLCJyZXNpemUiLCJjbGVhblVwUm93cyIsImRlc3Ryb3kiLCJmYWRlU2xpZGUiLCJzbGlkZUluZGV4IiwiZmFkZVNsaWRlT3V0IiwiZmlsdGVyU2xpZGVzIiwic2xpY2tGaWx0ZXIiLCJmb2N1c0hhbmRsZXIiLCIkc2YiLCJnZXRDdXJyZW50Iiwic2xpY2tDdXJyZW50U2xpZGUiLCJicmVha1BvaW50IiwiY291bnRlciIsInBhZ2VyUXR5IiwiZ2V0TGVmdCIsInZlcnRpY2FsSGVpZ2h0IiwidGFyZ2V0U2xpZGUiLCJjb2VmIiwidmVydGljYWxPZmZzZXQiLCJmbG9vciIsIm9mZnNldExlZnQiLCJvdXRlcldpZHRoIiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJpbmRleGVzIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50Iiwic3dpcGVkU2xpZGUiLCJjZW50ZXJPZmZzZXQiLCJhYnMiLCJnb1RvIiwic2xpY2tHb1RvIiwiY3JlYXRpb24iLCJzZXRQcm9wcyIsInN0YXJ0TG9hZCIsImxvYWRTbGlkZXIiLCJpbml0aWFsaXplRXZlbnRzIiwidXBkYXRlQXJyb3dzIiwiaW5pdEFEQSIsIm51bURvdEdyb3VwcyIsInRhYkNvbnRyb2xJbmRleGVzIiwic2xpZGVDb250cm9sSW5kZXgiLCJhcmlhQnV0dG9uQ29udHJvbCIsIm1hcHBlZFNsaWRlSW5kZXgiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiYWN0aW9uIiwiaW5pdFVJIiwidGFnTmFtZSIsImxvYWRSYW5nZSIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImxvYWRJbWFnZXMiLCJpbWFnZXNTY29wZSIsImltYWdlU291cmNlIiwiaW1hZ2VTcmNTZXQiLCJpbWFnZVNpemVzIiwiaW1hZ2VUb0xvYWQiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwic2xpY2tOZXh0IiwicGF1c2UiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsInRyeUNvdW50IiwiJGltZ3NUb0xvYWQiLCJpbml0aWFsaXppbmciLCJsYXN0VmlzaWJsZUluZGV4IiwiY3VycmVudEJyZWFrcG9pbnQiLCJyZXNwb25zaXZlU2V0dGluZ3MiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJyZW1vdmVCZWZvcmUiLCJyZW1vdmVBbGwiLCJzZXRDU1MiLCJ4IiwieSIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwic2V0RmFkZSIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwiYm9keVN0eWxlIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJtc1RyYW5zaXRpb24iLCJPVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsImFsbFNsaWRlcyIsInJlbWFpbmRlciIsImV2ZW5Db2VmIiwiaW5maW5pdGVDb3VudCIsInRhcmdldEVsZW1lbnQiLCJzeW5jIiwiYW5pbVNsaWRlIiwib2xkU2xpZGUiLCJzbGlkZUxlZnQiLCJuYXZUYXJnZXQiLCJzd2lwZURpcmVjdGlvbiIsInhEaXN0IiwieURpc3QiLCJyIiwic3dpcGVBbmdsZSIsInN0YXJ0WCIsImN1clgiLCJzdGFydFkiLCJjdXJZIiwiYXRhbjIiLCJzd2lwZUVuZCIsInN3aXBlTGVuZ3RoIiwiZWRnZUhpdCIsIm1pblN3aXBlIiwiZmluZ2VyQ291bnQiLCJzd2lwZVN0YXJ0Iiwic3dpcGVNb3ZlIiwicG9zaXRpb25PZmZzZXQiLCJ2ZXJ0aWNhbFN3aXBlTGVuZ3RoIiwic3FydCIsInBvdyIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsImZyb21CcmVha3BvaW50IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwibyIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsImJhc2VVUkkiLCJfX19IVE1MX0xPQURFUl9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xX19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzJfX18iLCJfX19IVE1MX0xPQURFUl9JTVBPUlRfM19fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF80X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzVfX18iLCJfX19IVE1MX0xPQURFUl9JTVBPUlRfNl9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF83X19fIiwiX19fSFRNTF9MT0FERVJfSU1QT1JUXzhfX18iLCJfX19IVE1MX0xPQURFUl9JTVBPUlRfOV9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMV9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xMl9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xM19fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNV9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xNl9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xN19fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xOF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8xOV9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMV9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yMl9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yM19fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNV9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yNl9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yN19fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8yOV9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8zMF9fXyIsIl9fX0hUTUxfTE9BREVSX0lNUE9SVF8zMV9fXyIsInN0ZXBzIiwiZm9yRWFjaCIsImNsYXNzTGlzdCJdLCJzb3VyY2VSb290IjoiIn0=